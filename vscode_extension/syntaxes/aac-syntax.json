{
    "information_for_contributors": [
        "The YAML-specific portions of this file have been copied from:",
        "https://raw.githubusercontent.com/microsoft/vscode/main/extensions/yaml/syntaxes/yaml.tmLanguage.json"
    ],
    "version": "https://github.com/microsoft/vscode/blob/772aaf777a2e6b50c5c2e53da1a0955d2cb73a4d/extensions/yaml/syntaxes/yaml.tmLanguage.json",
    "name": "AaC",
    "scopeName": "source.aac",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#property"
        },
        {
            "include": "#directive"
        },
        {
            "match": "^---",
            "name": "entity.other.document.begin.aac"
        },
        {
            "match": "^\\.{3}",
            "name": "entity.other.document.end.aac"
        },
        {
            "include": "#node"
        }
    ],
    "repository": {
        "block-collection": {
            "patterns": [
                {
                    "include": "#block-sequence"
                },
                {
                    "include": "#block-mapping"
                }
            ]
        },
        "block-mapping": {
            "patterns": [
                {
                    "include": "#block-pair"
                }
            ]
        },
        "block-node": {
            "patterns": [
                {
                    "include": "#prototype"
                },
                {
                    "include": "#block-scalar"
                },
                {
                    "include": "#block-collection"
                },
                {
                    "include": "#flow-scalar-plain-out"
                },
                {
                    "include": "#flow-node"
                }
            ]
        },
        "block-pair": {
            "patterns": [
                {
                    "begin": "\\?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.key-value.begin.aac"
                        }
                    },
                    "end": "(?=\\?)|^ *(:)|(:)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.key-value.mapping.aac"
                        },
                        "2": {
                            "name": "invalid.illegal.expected-newline.aac"
                        }
                    },
                    "name": "meta.block-mapping.aac",
                    "patterns": [
                        {
                            "include": "#block-node"
                        }
                    ]
                },
                {
                    "begin": "(?x)\n                        (?=\n                            (?x:\n                                  [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                                | [?:-] \\S\n                            )\n                            (\n                                  [^\\s:]\n                                | : \\S\n                                | \\s+ (?![#\\s])\n                            )*\n                            \\s*\n                            :\n\t\t\t\t\t\t\t(\\s|$)\n                        )\n                    ",
                    "end": "(?x)\n                        (?=\n                              \\s* $\n                            | \\s+ \\#\n                            | \\s* : (\\s|$)\n                        )\n                    ",
                    "patterns": [
                        {
                            "include": "#flow-scalar-plain-out-implicit-type"
                        },
                        {
                            "begin": "(?x)\n                                  [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                                | [?:-] \\S\n                            ",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.aac"
                                }
                            },
                            "contentName": "entity.name.tag.aac",
                            "end": "(?x)\n                                (?=\n                                      \\s* $\n                                    | \\s+ \\#\n                                    | \\s* : (\\s|$)\n                                )\n                            ",
                            "name": "string.unquoted.plain.out.aac"
                        }
                    ]
                },
                {
                    "match": ":(?=\\s|$)",
                    "name": "punctuation.separator.key-value.mapping.aac"
                }
            ]
        },
        "block-scalar": {
            "begin": "(?:(\\|)|(>))([1-9])?([-+])?(.*\\n?)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.flow.block-scalar.literal.aac"
                },
                "2": {
                    "name": "keyword.control.flow.block-scalar.folded.aac"
                },
                "3": {
                    "name": "constant.numeric.indentation-indicator.aac"
                },
                "4": {
                    "name": "storage.modifier.chomping-indicator.aac"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "match": ".+",
                            "name": "invalid.illegal.expected-comment-or-newline.aac"
                        }
                    ]
                }
            },
            "end": "^(?=\\S)|(?!\\G)",
            "patterns": [
                {
                    "begin": "^([ ]+)(?! )",
                    "end": "^(?!\\1|\\s*$)",
                    "name": "string.unquoted.block.aac"
                }
            ]
        },
        "block-sequence": {
            "match": "(-)(?!\\S)",
            "name": "punctuation.definition.block.sequence.item.aac"
        },
        "comment": {
            "begin": "(?:(^[ \\t]*)|[ \\t]+)(?=#\\p{Print}*$)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.comment.leading.aac"
                }
            },
            "end": "(?!\\G)",
            "patterns": [
                {
                    "begin": "#",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.aac"
                        }
                    },
                    "end": "\\n",
                    "name": "comment.line.number-sign.aac"
                }
            ]
        },
        "directive": {
            "begin": "^%",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.directive.begin.aac"
                }
            },
            "end": "(?=$|[ \\t]+($|#))",
            "name": "meta.directive.aac",
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.directive.aac.aac"
                        },
                        "2": {
                            "name": "constant.numeric.aac-version.aac"
                        }
                    },
                    "match": "\\G(YAML)[ \\t]+(\\d+\\.\\d+)"
                },
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.directive.tag.aac"
                        },
                        "2": {
                            "name": "storage.type.tag-handle.aac"
                        },
                        "3": {
                            "name": "support.type.tag-prefix.aac"
                        }
                    },
                    "match": "(?x)\n                        \\G\n                        (TAG)\n                        (?:[ \\t]+\n                            ((?:!(?:[0-9A-Za-z\\-]*!)?))\n                            (?:[ \\t]+ (\n                                  !              (?x: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )*\n                                | (?![,!\\[\\]{}]) (?x: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )+\n                                )\n                            )?\n                        )?\n                    "
                },
                {
                    "captures": {
                        "1": {
                            "name": "support.other.directive.reserved.aac"
                        },
                        "2": {
                            "name": "string.unquoted.directive-name.aac"
                        },
                        "3": {
                            "name": "string.unquoted.directive-parameter.aac"
                        }
                    },
                    "match": "(?x) \\G (\\w+) (?:[ \\t]+ (\\w+) (?:[ \\t]+ (\\w+))? )?"
                },
                {
                    "match": "\\S+",
                    "name": "invalid.illegal.unrecognized.aac"
                }
            ]
        },
        "flow-alias": {
            "captures": {
                "1": {
                    "name": "keyword.control.flow.alias.aac"
                },
                "2": {
                    "name": "punctuation.definition.alias.aac"
                },
                "3": {
                    "name": "variable.other.alias.aac"
                },
                "4": {
                    "name": "invalid.illegal.character.anchor.aac"
                }
            },
            "match": "((\\*))([^\\s\\[\\]/{/},]+)([^\\s\\]},]\\S*)?"
        },
        "flow-collection": {
            "patterns": [
                {
                    "include": "#flow-sequence"
                },
                {
                    "include": "#flow-mapping"
                }
            ]
        },
        "flow-mapping": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.mapping.begin.aac"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.mapping.end.aac"
                }
            },
            "name": "meta.flow-mapping.aac",
            "patterns": [
                {
                    "include": "#prototype"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.mapping.aac"
                },
                {
                    "include": "#flow-pair"
                }
            ]
        },
        "flow-node": {
            "patterns": [
                {
                    "include": "#prototype"
                },
                {
                    "include": "#flow-alias"
                },
                {
                    "include": "#flow-collection"
                },
                {
                    "include": "#flow-scalar"
                }
            ]
        },
        "flow-pair": {
            "patterns": [
                {
                    "begin": "\\?",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.key-value.begin.aac"
                        }
                    },
                    "end": "(?=[},\\]])",
                    "name": "meta.flow-pair.explicit.aac",
                    "patterns": [
                        {
                            "include": "#prototype"
                        },
                        {
                            "include": "#flow-pair"
                        },
                        {
                            "include": "#flow-node"
                        },
                        {
                            "begin": ":(?=\\s|$|[\\[\\]{},])",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.separator.key-value.mapping.aac"
                                }
                            },
                            "end": "(?=[},\\]])",
                            "patterns": [
                                {
                                    "include": "#flow-value"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?x)\n                        (?=\n                            (?:\n                                [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                              | [?:-] [^\\s[\\[\\]{},]]\n                            )\n                            (\n                                  [^\\s:[\\[\\]{},]]\n                                | : [^\\s[\\[\\]{},]]\n                                | \\s+ (?![#\\s])\n                            )*\n                            \\s*\n                            :\n\t\t\t\t\t\t\t(\\s|$)\n                        )\n                    ",
                    "end": "(?x)\n                        (?=\n                              \\s* $\n                            | \\s+ \\#\n                            | \\s* : (\\s|$)\n                            | \\s* : [\\[\\]{},]\n                            | \\s* [\\[\\]{},]\n                        )\n                    ",
                    "name": "meta.flow-pair.key.aac",
                    "patterns": [
                        {
                            "include": "#flow-scalar-plain-in-implicit-type"
                        },
                        {
                            "begin": "(?x)\n                                  [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                                | [?:-] [^\\s[\\[\\]{},]]\n                            ",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.aac"
                                }
                            },
                            "contentName": "entity.name.tag.aac",
                            "end": "(?x)\n                                (?=\n                                      \\s* $\n                                    | \\s+ \\#\n                                    | \\s* : (\\s|$)\n                                    | \\s* : [\\[\\]{},]\n                                    | \\s* [\\[\\]{},]\n                                )\n                            ",
                            "name": "string.unquoted.plain.in.aac"
                        }
                    ]
                },
                {
                    "include": "#flow-node"
                },
                {
                    "begin": ":(?=\\s|$|[\\[\\]{},])",
                    "captures": {
                        "0": {
                            "name": "punctuation.separator.key-value.mapping.aac"
                        }
                    },
                    "end": "(?=[},\\]])",
                    "name": "meta.flow-pair.aac",
                    "patterns": [
                        {
                            "include": "#flow-value"
                        }
                    ]
                }
            ]
        },
        "flow-scalar": {
            "patterns": [
                {
                    "include": "#flow-scalar-double-quoted"
                },
                {
                    "include": "#flow-scalar-single-quoted"
                },
                {
                    "include": "#flow-scalar-plain-in"
                }
            ]
        },
        "flow-scalar-double-quoted": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.aac"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.aac"
                }
            },
            "name": "string.quoted.double.aac",
            "patterns": [
                {
                    "match": "\\\\([0abtnvfre \"/\\\\N_Lp]|x\\d\\d|u\\d{4}|U\\d{8})",
                    "name": "constant.character.escape.aac"
                },
                {
                    "match": "\\\\\\n",
                    "name": "constant.character.escape.double-quoted.newline.aac"
                }
            ]
        },
        "flow-scalar-plain-in": {
            "patterns": [
                {
                    "include": "#flow-scalar-plain-in-implicit-type"
                },
                {
                    "begin": "(?x)\n                          [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                        | [?:-] [^\\s[\\[\\]{},]]\n                    ",
                    "end": "(?x)\n                        (?=\n                              \\s* $\n                            | \\s+ \\#\n                            | \\s* : (\\s|$)\n                            | \\s* : [\\[\\]{},]\n                            | \\s* [\\[\\]{},]\n                        )\n                    ",
                    "name": "string.unquoted.plain.in.aac"
                }
            ]
        },
        "flow-scalar-plain-in-implicit-type": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "constant.language.null.aac"
                        },
                        "2": {
                            "name": "constant.language.boolean.aac"
                        },
                        "3": {
                            "name": "constant.numeric.integer.aac"
                        },
                        "4": {
                            "name": "constant.numeric.float.aac"
                        },
                        "5": {
                            "name": "constant.other.timestamp.aac"
                        },
                        "6": {
                            "name": "constant.language.value.aac"
                        },
                        "7": {
                            "name": "constant.language.merge.aac"
                        }
                    },
                    "match": "(?x)\n                        (?x:\n                              (null|Null|NULL|~)\n                            | (y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)\n                            | (\n                                (?:\n                                      [-+]? 0b [0-1_]+ # (base 2)\n                                    | [-+]? 0  [0-7_]+ # (base 8)\n                                    | [-+]? (?: 0|[1-9][0-9_]*) # (base 10)\n                                    | [-+]? 0x [0-9a-fA-F_]+ # (base 16)\n                                    | [-+]? [1-9] [0-9_]* (?: :[0-5]?[0-9])+ # (base 60)\n                                )\n                              )\n                            | (\n                                (?x:\n                                      [-+]? (?: [0-9] [0-9_]*)? \\. [0-9.]* (?: [eE] [-+] [0-9]+)? # (base 10)\n                                    | [-+]? [0-9] [0-9_]* (?: :[0-5]?[0-9])+ \\. [0-9_]* # (base 60)\n                                    | [-+]? \\. (?: inf|Inf|INF) # (infinity)\n                                    |       \\. (?: nan|NaN|NAN) # (not a number)\n                                )\n                              )\n                            | (\n                                (?x:\n                                    \\d{4} - \\d{2} - \\d{2}           # (y-m-d)\n                                  | \\d{4}                           # (year)\n                                    - \\d{1,2}                       # (month)\n                                    - \\d{1,2}                       # (day)\n                                    (?: [Tt] | [ \\t]+) \\d{1,2}      # (hour)\n                                    : \\d{2}                         # (minute)\n                                    : \\d{2}                         # (second)\n                                    (?: \\.\\d*)?                     # (fraction)\n                                    (?:\n                                          (?:[ \\t]*) Z\n                                        | [-+] \\d{1,2} (?: :\\d{1,2})?\n                                    )?                              # (time zone)\n                                )\n                              )\n                            | (=)\n                            | (<<)\n                        )\n                        (?:\n                            (?=\n                                  \\s* $\n                                | \\s+ \\#\n                                | \\s* : (\\s|$)\n                                | \\s* : [\\[\\]{},]\n                                | \\s* [\\[\\]{},]\n                            )\n                        )\n                    "
                }
            ]
        },
        "flow-scalar-plain-out": {
            "patterns": [
                {
                    "include": "#flow-scalar-plain-out-implicit-type"
                },
                {
                    "begin": "(?x)\n                          [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                        | [?:-] \\S\n                    ",
                    "end": "(?x)\n                        (?=\n                              \\s* $\n                            | \\s+ \\#\n                            | \\s* : (\\s|$)\n                        )\n                    ",
                    "name": "string.unquoted.plain.out.aac"
                }
            ]
        },
        "flow-scalar-plain-out-implicit-type": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "constant.language.null.aac"
                        },
                        "2": {
                            "name": "constant.language.boolean.aac"
                        },
                        "3": {
                            "name": "constant.numeric.integer.aac"
                        },
                        "4": {
                            "name": "constant.numeric.float.aac"
                        },
                        "5": {
                            "name": "constant.other.timestamp.aac"
                        },
                        "6": {
                            "name": "constant.language.value.aac"
                        },
                        "7": {
                            "name": "constant.language.merge.aac"
                        }
                    },
                    "match": "(?x)\n                        (?x:\n                              (null|Null|NULL|~)\n                            | (y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)\n                            | (\n                                (?:\n                                      [-+]? 0b [0-1_]+ # (base 2)\n                                    | [-+]? 0  [0-7_]+ # (base 8)\n                                    | [-+]? (?: 0|[1-9][0-9_]*) # (base 10)\n                                    | [-+]? 0x [0-9a-fA-F_]+ # (base 16)\n                                    | [-+]? [1-9] [0-9_]* (?: :[0-5]?[0-9])+ # (base 60)\n                                )\n                              )\n                            | (\n                                (?x:\n                                      [-+]? (?: [0-9] [0-9_]*)? \\. [0-9.]* (?: [eE] [-+] [0-9]+)? # (base 10)\n                                    | [-+]? [0-9] [0-9_]* (?: :[0-5]?[0-9])+ \\. [0-9_]* # (base 60)\n                                    | [-+]? \\. (?: inf|Inf|INF) # (infinity)\n                                    |       \\. (?: nan|NaN|NAN) # (not a number)\n                                )\n                              )\n                            | (\n                                (?x:\n                                    \\d{4} - \\d{2} - \\d{2}           # (y-m-d)\n                                  | \\d{4}                           # (year)\n                                    - \\d{1,2}                       # (month)\n                                    - \\d{1,2}                       # (day)\n                                    (?: [Tt] | [ \\t]+) \\d{1,2}      # (hour)\n                                    : \\d{2}                         # (minute)\n                                    : \\d{2}                         # (second)\n                                    (?: \\.\\d*)?                     # (fraction)\n                                    (?:\n                                          (?:[ \\t]*) Z\n                                        | [-+] \\d{1,2} (?: :\\d{1,2})?\n                                    )?                              # (time zone)\n                                )\n                              )\n                            | (=)\n                            | (<<)\n                        )\n                        (?x:\n                            (?=\n                                  \\s* $\n                                | \\s+ \\#\n                                | \\s* : (\\s|$)\n                            )\n                        )\n                    "
                }
            ]
        },
        "flow-scalar-single-quoted": {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.aac"
                }
            },
            "end": "'(?!')",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.aac"
                }
            },
            "name": "string.quoted.single.aac",
            "patterns": [
                {
                    "match": "''",
                    "name": "constant.character.escape.single-quoted.aac"
                }
            ]
        },
        "flow-sequence": {
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.sequence.begin.aac"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.sequence.end.aac"
                }
            },
            "name": "meta.flow-sequence.aac",
            "patterns": [
                {
                    "include": "#prototype"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.sequence.aac"
                },
                {
                    "include": "#flow-pair"
                },
                {
                    "include": "#flow-node"
                }
            ]
        },
        "flow-value": {
            "patterns": [
                {
                    "begin": "\\G(?![},\\]])",
                    "end": "(?=[},\\]])",
                    "name": "meta.flow-pair.value.aac",
                    "patterns": [
                        {
                            "include": "#flow-node"
                        }
                    ]
                }
            ]
        },
        "node": {
            "patterns": [
                {
                    "include": "#block-node"
                }
            ]
        },
        "property": {
            "begin": "(?=!|&)",
            "end": "(?!\\G)",
            "name": "meta.property.aac",
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "keyword.control.property.anchor.aac"
                        },
                        "2": {
                            "name": "punctuation.definition.anchor.aac"
                        },
                        "3": {
                            "name": "entity.name.type.anchor.aac"
                        },
                        "4": {
                            "name": "invalid.illegal.character.anchor.aac"
                        }
                    },
                    "match": "\\G((&))([^\\s\\[\\]/{/},]+)(\\S+)?"
                },
                {
                    "match": "(?x)\n                        \\G\n                        (?:\n                            ! < (?: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )+ >\n                          | (?:!(?:[0-9A-Za-z\\-]*!)?) (?: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$_.~*'()] )+\n                          | !\n                        )\n                        (?=\\ |\\t|$)\n                    ",
                    "name": "storage.type.tag-handle.aac"
                },
                {
                    "match": "\\S+",
                    "name": "invalid.illegal.tag-handle.aac"
                }
            ]
        },
        "prototype": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#property"
                }
            ]
        }
    }
}
