---
model:
  name: aac
  description: |
    AaC is an architecture-as-code command line tool that allows an engineering team to capture representaitons of their
    system decomposition, system interfaces, system behaviors, and traceability within a configuration managable form.
  components:
    - name: parser
      type: ArchParser
    - name: validator
      type: ArchValidator
    - name: json
      type: JsonConverter
    - name: puml
      type: PlantUmlGenerator
  behavior:
    - name: validate
      type: command
      description: |
        The validate command reads a yaml file containing an architecture specification and ensures it is properly formed.
        If the model is properly formed the validate method returns true.
        If the model is improperly formed the validate method returns false and an error message.
      input:
        - name: archFile
          type: file
      output:
        - name: result
          type: ValidationResult
      acceptance:
        - scenario: Validate a correct architecture.
          given:
            - The {{validate.input.archFile}} contains a valid architecture specification.
          when:
            - The aac application is run with the validate command.
          then:
            - The {{validate.output.result.isValid}} output is true.
            - The {{validate.output.result.errorMsg}} output is empty.
        - scenario: Validate an incorrect architecture.
          tags:
            - off-nominal
          given:
            - The {{validate.input.archFile}} contains an invalid architecture specification.
          when:
            - The aac application is run with the validate command.
          then:
            - The {{validate.output.result.isValid}} output is false.
            - The {{validate.output.result.errorMsg}} output contains details of the error.
    - name: json
      type: command
      description: |
        The json command reads a yaml file containing an architecture specification, validates it using the validate command,
        and if valid outputs a corresponding json representation.  If the input yaml is invlid, an error message is provided.
      input:
        - name: archFile
          type: file
      output:
        - name: json
          type: string
      acceptance:
        - scenario: Output JSON for valid architecture.
          given:
            - The {{json.input.archFile}} contains a valid architecture specification.
          when:
            - The aac app is run with the json command.
          then:
            - The {{json.output.json}} contains a JSON representation of the architecture specification.
        - scenario: Output error for invalid architecture.
          tags: ["off-nominal"]
          given:
            - The {{json.input.archFile}} contains an invalid architecture specification.
          when:
            - The aac app is run with the json command.
          then:
            - The application raises an exception.
    - name: puml-component
      type: command
      description: |
        The puml-component command reads a yaml file containing an architecture specification, validates it using the validate command,
        and if valid outputs a corresponding PlantUML representation.  If the input yaml is invlid, an exception is thrown.
      input:
        - name: archFile
          type: file
      output:
        - name: puml
          type: string
      acceptance:
        - scenario: Output PlantUML component diagram for valid architecture.
          given:
            - The {{puml.input.archFile}} contains a valid architecture specification.
          when:
            - The aac app is run with the puml-component command.
          then:
            - The {{puml.output.puml}} contains a PlantUML representation of the architecture specification.
        - scenario: Output error for invalid architecture.
          tags: ["off-nominal"]
          given:
            - The {{puml.input.archFile}} contains an invalid architecture specification.
          when:
            - The aac app is run with the puml command.
          then:
            - The application raises an exception.
    - name: puml-sequence
      type: command
      description: |
        The puml-sequence command reads a yaml file containing an use case specification, validates it using the validate command,
        and if valid outputs a corresponding PlantUML sequence diagram representation.  If the input yaml is invlid, an exception is thrown.
      input:
        - name: archFile
          type: file
      output:
        - name: puml
          type: string
      acceptance:
        - scenario: Output PlantUML sequence diagram for valid use case.
          given:
            - The {{puml.input.archFile}} contains a valid use case specification.
          when:
            - The aac app is run with the puml-sequence command.
          then:
            - The {{puml.output.puml}} contains a PlantUML sequence diagram of the use case specification.
        - scenario: Output error for invalid architecture.
          tags: ["off-nominal"]
          given:
            - The {{puml.input.archFile}} contains an invalid specification.
          when:
            - The aac app is run with the puml-sequence command.
          then:
            - The application raises an exception.
---
data:
  name: ParserResult
  fields:
    - name: models
      type: ModelMap[]
    - name: data
      type: DataMap[]
    - name: enums
      type: EnumMap[]
    - name: errorMsg
      type: string[]
---
data:
  name: ModelMap
  fields:
    - name: name
      type: string
    - name: model
      type: model
---
data:
  name: DataMap
  fields:
    - name: name
      type: string
    - name: data
      type: data
---
data:
  name: EnumMap
  fields:
    - name: name
      type: string
    - name: enum
      type: enum
---
model:
  name: ArchParser
  description: |
    The parser reads a YAML file and provides back a model representing the contents of the YAML file.
    The parser does not inherently perform any validation.
  behavior:
    - name: parse
      type: request-response
      input:
        - name: archFile
          type: file
      output:
        - name: reslut
          type: ParserResult
      acceptance:
        - scenario: Parse a valid YAML model.
          given:
            - The {{parse.input.archFile}} is a valid YAML file containing a single model.
          when:
            - The parser is run.
          then:
            - The {{parse.output.result.models}} is not empty.
            - The {{parse.output.result.models contains}} a single entry.
            - The {{parse.output.result.data}} is empty.
            - The {{parse.output.enums}} is empty.
            - The {{parse.output.errorMsg}} is empty.
        - scenario: Parse invalid YAML model.
          given:
            - The {{parse.input.archFile}} is an invalid YAML file containing a single model.
          when:
            - The parser is run.
          then:
            - The {{parse.output.models}} is empty.
            - The {{parse.output.data}} is empty.
            - The {{parse.output.enums}} is empty.
            - The {{parse.output.errorMsg}} contains information about the error.
        - scenario: Parse a valid YAML data.
          given:
            - The {{parse.input.archFile}} is a valid YAML file containing a single data.
          when:
            - The parser is run.
          then:
            - The {{parse.output.models}} is empty.
            - The {{parse.output.data}} is not empty.
            - The {{parse.output.data}} contains a single entry.
            - The {{parse.output.enums}} is empty.
            - The {{parse.output.errorMsg}} is empty.
        - scenario: Parse invalid YAML data.
          given:
            - The {{parse.input.archFile}} is an invalid YAML file containing a single data.
          when:
            - The parser is run.
          then:
            - The {{parse.output.models}} is empty.
            - The {{parse.output.data}} is empty.
            - The {{parse.output.enums}} is empty.
            - The {{parse.output.errorMsg} contains information about the error.
        - scenario: Parse a valid YAML multi-entry model.
          given:
            - The {{parse.input.archFile}} is a valid YAML file containing two models.
          when:
            - The parser is run.
          then:
            - The {{parse.output.models}} is not empty.
            - The {{parse.output.models}} contains two entries.
            - The {{parse.output.data}} is empty.
            - The {{parse.output.enums}} is empty.
            - The {{parse.output.errorMsg}} is empty.
        - scenario: Parse a valid YAML multi-entry data.
          given:
             - The {{parse.input.archFile}} is a valid YAML file containing two data.
          when:
            - The parser is run.
          then:
            - The {{parse.output.models}} is empty.
            - The {{parse.output.data}} contains two entries.
            - The {{parse.output.enums}} is empty.
            - The {{parse.output.errorMsg}} is empty.
        - scenario: Parse a valid YAML multi-entry model and data.
          given:
            - The {{parse.input.archFile}} is a valid YAML file containing one model and one data.
          when:
            - The parser is run.
          then:
            - The {{parse.output.models}} is not empty.
            - The {{parse.output.models}} contains one entry.
            - The {{parse.output.data}} is not empty.
            - The {{parse.output.data}} contains one entry.
            - The {{parse.output.enums}}  is empty.
            - The {{parse.output.errorMsg}} is empty.
---
data:
  name: ValidationResult
  fields:
    - name: isValid
      type: bool
    - name: errors
      type: string[]
---
ext:
  name: restActionType
  type: BehaviorType
  enumExt:
    add:
      - rest
---
ext:
  name: addCountToValidationResult
  type: ValidationResult
  dataExt:
    add:
      - name: errCount
        type: int
---
model:
  name: ArchValidator
  description: The validator examines a model for correctness of form and content.
  behavior:
    - name: validate
      type: request-response
      input:
        - name: archFile
          type: file
      output:
        - name: result
          type: ValidationResult
      acceptance:
        - scenario: Validate a good model.
          given:
            - The {{validate.input.archFile}} is correct in form and content.
          when:
            - The validator is run.
          then:
            - The {{validate.output.result.isValid}} is true.
            - The {{validate.output.result.errorMsg}} is empty.
        - scenario: Validate a bad model.
          given:
            - The {{validate.input.archFile}} is an invalid.
          when:
            - The validator is run.
          then:
            - The {{validate.output.result.isValid}} is false.
            - The {{validate.output.result.errorMsg}} contains information about the error.
---
model:
  name: JsonConverter
  description: The JsonConverter validates a model using the ArchValidator then converts it to JSON.
  behavior:
    - name: convertJson
      type: request-response
      input:
        - name: archFile
          type: file
      output:
        - name: json
          type: string
      acceptance:
        - scenario: Convert a good model.
          given:
            - The {{convertJson.input.archFile}} is correct in form and content.
          when:
            - The JsonConverter is run.
          then:
            - The {{convertJson.output.json}} is not empty.
---
model:
  name: PlantUmlGenerator
  description: |
    The PlantUmlGenerator validates a model using the ArchValidator then generated a PlantUML component model.
  behavior:
    - name: umlComponent
      type: request-response
      input:
        - name: archFile
          type: file
      output:
        - name: umlCopmponentModel
          type: string
      acceptance:
        - scenario: Convert a good model.
          given:
            - The {{umlComponent.input.archFile}} is correct in form and content.
          when:
            - The PlantUmlConverter component generator is run.
          then:
            - The {{umlComponent.output.umlComponentModel}} is not empty.
    - name: umlSequence
      type: request-response
      input:
        - name: archFile
          type: file
      output:
        - name: umlSequenceModel
          type: string
      acceptance:
        - scenario: Convert a good model.
          given:
            - The {{umlComponent.input.archFile}} is correct in form and content.
          when:
            - The PlantUmlConverter sequence generator is run.
          then:
            - The {{umlComponent.output.umlSequenceModel}} is not empty.
