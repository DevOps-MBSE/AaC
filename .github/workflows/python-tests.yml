on:
  workflow_call:

defaults:
  run:
    working-directory: ./python

jobs:
  python_tests:
    name: Python ${{ matrix.py_version }} Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        py_version: ["3.9.0", "3.9.13", "3.10.5"]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.py_version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py_version }}

    - name: Install the AaC Package
      run: pip install -e .[all]

    - name: Run Tox Tests
      if: matrix.py_version != '3.9.13'
      run: tox -e $(echo py${{ matrix.py_version }} | awk -F "." '{print $1$2;}')

    - name: Run Tox Tests With Coverage
      if: matrix.py_version == '3.9.13'
      run: tox -e py39 -- --coverage-report html

    - name: Upload Code Coverage Report
      uses: actions/upload-artifact@v2
      if: matrix.py_version == '3.9.13'
      with:
        name: test-coverage-report
        path: python/html_code_coverage/

    - name: Validate Core Spec and Plugin Specs
      run: |
        find src -name spec.yaml -print0 | xargs -0 -n1 aac validate
        find src -name spec.yaml -print0 | xargs -0 -n1 aac validate --definition-name root
        find src/aac/plugins -name *.yaml -print0 | xargs -0 -n1 aac validate

    - name: Test Gen-Plugin First-Party Plugin
      run: |
        mkdir -p src/aac/plugins/first_party/
        cp model/plugin/plugin.yaml src/aac/plugins/first_party/first_party.yaml
        echo y | aac gen-plugin src/aac/plugins/first_party/first_party.yaml
        pip install .[all]

    - name: Test Gen-Plugin Third-Party Plugin
      run: |
        echo y | aac gen-plugin model/plugin/plugin.yaml
        cd model/plugin/
        pip install .[all]
        aac -h | grep "test-plugin-command"

    - name: Upload logs from failed runs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: failed_test_log
        path: python/src/aac/aac.log

  os_test_matrix_setup:
    name: Setup OS Test Matrix
    runs-on: ubuntu-latest

    outputs:
      wheel_name: ${{ steps.wheel_artifact.outputs.wheel_name }}

    steps:
      - name: Download Python Wheel
        uses: actions/download-artifact@v2
        with:
          name: aac_wheel
          path: python/dist/

      - name: Set Wheel Artifact Name
        id: wheel_artifact
        run: echo "::set-output name=wheel_name::$(basename $(ls dist/*.whl))"

  os_test_matrix:
      name: Python ${{ matrix.os }} Tests
      needs: os_test_matrix_setup
      runs-on: ${{ matrix.os }}

      strategy:
          matrix:
            os: [ubuntu-latest, windows-latest]

      steps:
        - name: Set up Python 3.9
          uses: actions/setup-python@v2
          with:
            python-version: 3.9

        - name: Download AaC models
          uses: actions/download-artifact@v2
          with:
            name: aac-models
            path: python/model/

        - name: Download Python Wheel
          uses: actions/download-artifact@v2
          id: download-wheel
          with:
            name: aac_wheel
            path: python/dist/

        - name: Install Wheel Distribution
          run: pip install ${{steps.download-wheel.outputs.download-path}}/${{needs.os_test_matrix_setup.outputs.wheel_name}}

        - name: Get Package Version
          run: python -m aac version

        - name: Validate Core Spec
          if: matrix.os != 'windows-latest'
          run: |
            spec_file=$(find $pythonLocation -name spec.yaml | head -n1)
            python -m aac validate $spec_file
        - name: Validate Core Spec
          if: matrix.os == 'windows-latest'
          run: |
            $spec_file=$(gci -r -fi spec.yaml -Name "$Env:pythonLocation")
            python -m aac validate "$Env:pythonLocation\$spec_file"

        - name: Print out Core Spec
          run: python -m aac print-spec

        - name: Print out active context
          run: python -m aac print-active-context

        - name: Validate Example Model
          run: python -m aac validate model/flow/System.yaml

        - name: Create PlantUML Component Diagram
          run: python -m aac puml-object model/flow/System.yaml output/

        - name: Upload logs from failed runs
          if: ${{ failure() }}
          uses: actions/upload-artifact@v2
          with:
            name: failed_test_log
            path: ${{ env.pythonLocation }}/**/aac.log
