on:
  workflow_call:

defaults:
  run:
    working-directory: ./python

jobs:
  os_build_matrix:
    name: Build ${{ matrix.os }} Secure Install Air Gap
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-latest, windows-latest, macos-latest] # Annoyingly, Github actions don't support anchors

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install the AaC Package
        run: python -m pip install -e .[all]

      - name: Create Dependencies Package
        id: os_id
        if: matrix.os != 'windows-latest'
        run: |
          ./secure_install/pipeline_scripts/create_install_archive.bash

      - name: Create Dependencies Package
        if: matrix.os == 'windows-latest'
        run: |
          ./secure_install/pipeline_scripts/create_install_archive.bat

      - name: Upload Dependencies Package
        uses: actions/upload-artifact@v3
        with:
          name: secure_install_${{ matrix.os }}
          path: python/secure_install/aac_secure_install_*


  os_test_matrix:
    name: Test ${{ matrix.os }}/${{ matrix.py_version }} Secure Install Air Gap
    needs: os_build_matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-latest, windows-latest, macos-latest] # Annoyingly, Github actions don't support anchors
        py_version: ["3.9.0", "3.10.0", "3.11.0"]
        exclude:
          - os: ubuntu-latest
            py_version: 3.9.0
          - os: ubuntu-latest
            py_version: 3.10.0
          - os: macos-latest
            py_version: 3.11.0

    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version:  ${{ matrix.py_version }}

      - name: Checkout Repository # Checked-out repository is necessary to test the first party plugin generation.
        uses: actions/checkout@v3

      - name: Download Secure Install
        uses: actions/download-artifact@v3
        with:
          name: secure_install_${{ matrix.os }}
          path: python/

      - name: Install from Secure Install
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x ./aac_secure_install_*/install_aac_air_gap.bash
          ./aac_secure_install_*/install_aac_air_gap.bash

      - name: Install from Secure Install
        if: matrix.os == 'windows-latest'
        run: |
          cd (Get-ChildItem -Filter aac_secure_install_*)
          .\install_aac_air_gap.bat

      - name: Get Package Version
        run: python -m aac version

      - name: Validate Core Spec
        if: matrix.os != 'windows-latest'
        run: |
          spec_file=$(find $pythonLocation -name spec.yaml | head -n1)
          python -m aac validate $spec_file

      - name: Validate Core Spec
        if: matrix.os == 'windows-latest'
        run: |
          $spec_file=$(gci -r -fi spec.yaml -Name "$Env:pythonLocation")
          python -m aac validate "$Env:pythonLocation\$spec_file"

      - name: Print out Core Spec
        run: python -m aac print-spec

      - name: Print out active context
        run: python -m aac print-active-context

      - name: Validate Primitive Type Check Plugin
        run: python -m aac validate src/aac/plugins/first_party/primitive_type_check/primitive_type_check.yaml

      - name: Validate Example Model
        run: python -m aac validate model/flow/System.yaml

      - name: Validate Alarm Clock
        run: python -m aac validate model/alarm_clock/alarm_clock.yaml

      - name: Create PlantUML Component Diagram
        run: python -m aac puml-object model/flow/System.yaml output/

      - name: Test Gen-Plugin Third-Party Plugin
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p model/third_party_test/
          cp model/plugin/*.yaml model/third_party_test/
          echo y | python -m aac gen-plugin model/third_party_test/plugin.yaml
          cd model/third_party_test/
          pip install .
          aac activate-plugin "Test Plugin"
          aac list-plugins --active | grep "Test Plugin"
          aac deactivate-plugin "Test Plugin"
          pip uninstall -y test-plugin
        shell:
          bash

      - name: Test Gen-Plugin First-Party Plugin
        run: |
          mkdir -p src/aac/plugins/first_party/test_plugin/
          cp model/plugin/*.yaml src/aac/plugins/first_party/test_plugin/
          echo y | aac gen-plugin src/aac/plugins/first_party/test_plugin/plugin.yaml
          pip install .
        shell:
          bash

      - name: Upload logs from failed runs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failed_test_log
          path: ${{ env.pythonLocation }}/**/aac.log
