---
# root is a special case representing the root of the architecture model and
# not explicitly included in a model file
schema:
  name: root
  fields:
    - name: import
      type: string[]
      description: |
        A list of references to other models composing the current model.

        Component model definitions must be visible from the current model's
        scope.
    - name: enum
      type: enum
      description: |
        A definition that represents an enumerated type of value.

        An example of when to use an 'enum' is when you want to provide several
        different options for a single value.
    - name: schema
      type: schema
      description: |
        A definition that defines the schema/structure of definitions.

        A 'schema' definition can alternatively be thought as a defining the
        data structure of a definition.
    - name: map
      type: Map
      description: |
        A definition that represents a key-value pair. Used to define Maps
        and the types for the keys and values.

        An example use of Map would be to declare a key-value data structure
        with keys of type A and values of type B.
    - name: model
      type: model
      description: |
        A definition that represents a system and/or component model.

        An example of when to use a 'model' is when you want to define the
        behavior for some component of the system.
    - name: usecase
      type: usecase
      description: |
        A definition that represents a usecase for the system.

        An example of when to use a 'usecase' is when you want to define how the
        system might be used in a particular instance.
    - name: ext
      type: extension
      description: |
        A meta definition used for adding information to another definition.

        An example of when to use an 'ext' is when you wish to add extra
        information to a model that isn't included in the core specification or
        the specification of any plugins you may have installed.

        You can extend any 'enum' and 'schema' definition.
    - name: validation
      type: Validation
      description: |
        A reference to a validation plugin. Validation plugins provide verification and validation
        for the definition to which they are attached and any uses of that definition, depending
        on the validation plugins referenced by it.

        Validators are referenced by name.
---
schema:
  name: enum
  fields:
    - name: name
      type: string
      description: |
        The name of the enumeration.
    - name: values
      type: string[]
      description: |
        A list of strings that encompass the enumeration's possible values.
  required:
    - name
    - values
---
schema:
  name: extension
  fields:
    - name: name
      type: string
      description: |
        The name of the extension.
    - name: type
      type: string
      description: |
        The name of the 'schema' or 'enum' definition that this definition is
        extending.
    - name: enumExt
      type: EnumExtension
      description: |
        If extending an 'enum' definition, this represents a list of the items
        to add to the 'enum's 'values' property.

        Note: Only one of 'enumExt' and 'schemaExt' are valid per extension.

        See also, 'EnumExtension'
    - name: schemaExt
      type: SchemaExtension
      description: |
        If extending an 'schema' definition, this represents a list of the items
        to add to the 'schema's 'fields' property.

        Note: Only one of 'enumExt' and 'schemaExt' are valid per extension.

        See also, 'SchemaExtension'
  validation:
    - name: Mutually exclusive fields
      arguments:
        - schemaExt
        - enumExt
  required:
    - name
    - type
---
schema:
  name: EnumExtension
  fields:
    - name: add
      type: string[]
      description: |
        The list of values to add to an 'enum' extension.
  required:
    - add
---
schema:
  name: SchemaExtension
  fields:
    - name: add
      type: Field[]
      description: |
        The list of fields to add to a 'schema' extension.
    - name: required
      type: string[]
      description: |
        The list of names of all the additional fields that are required for the
        extended definition.
  required:
    - add
---
schema:
  name: Validation
  fields:
    - name: name
      type: string
      description: |
        The name of the validation rule and plugin.
    - name: description
      type: string
      description: |
        A high-level description of the validation plugin.
    - name: behavior
      type: Behavior[]
      description: |
        A list of behaviors that the validation plugin will perform.
  required:
    - name
    - description
    - behavior
  validation:
    - name: Validation definition has an implementation
---
schema:
  name: ValidationReference
  fields:
    - name: name
      type: string
      description: |
        The name of the validation definition.
    - name: arguments
      type: string[]
      description: |
        A list of arguments to pass to the validator.
  required:
    - name
---
schema:
  name: ValidatorInput
  fields:
    - name: name
      type: string
      description: |
        The name of the input to the validation rule and plugin.
---
schema:
  name: ValidatorOutput
  fields:
    - name: name
      type: string
      description: |
        The name of the output from the validation rule and plugin.
---
schema:
  name: Scenario
  fields:
    - name: scenario
      type: string
      description: |
        The name of the scenario.
    - name: tags
      type: string[]
      description: |
        Tags associated with the scenario. These could be used to group similar
        scenarios into categories like "front-end", "back-end", etc.
    - name: given
      type: string[]
      description: |
        A list of preconditions that must be true in order for the scenario to
        perform the expected action or provide the expected result.
    - name: when
      type: string[]
      description: |
        A list of triggers that indicate some reason for the system to act in a
        certain way or provide some result.
    - name: then
      type: string[]
      description: |
        A list of post conditions that will be true once the system has completed
        its action based on the triggers.
  required:
    - scenario
    - when
    - then
---
enum:
  name: BehaviorType
  values:
    - pub-sub
    - request-response
    - startup
    - timer
---
enum:
  name: Primitives
  values:
    - string
    - int
    - number
    - bool
    - date
    - file
---
schema:
  name: Field
  fields:
    - name: name
      type: string
      description: |
        The name of the field.

        Used to refer to the field, in certain cases.
    - name: type
      type: string
      description: |
        The type of the field.

        Used to constrain the field's values to make it simpler to reason about. Must
        reference an existing definition by name.
    - name: description
      type: string
      description: |
        A description for the field to let users know what it's for and any
        other useful information.
  required:
    - name
    - type
  validation:
    - name: Type references exist
---
schema:
  name: schema
  fields:
    - name: name
      type: string
      description: |
        The name of the schema definition.
    - name: fields
      type: Field[]
      description: |
        A list of fields that make up the definition.
    - name: required
      type: string[]
      description: |
        The list of names of all the fields that are required for the
        definition.
    - name: validation
      type: ValidationReference[]
      description: |
        References and additional arguments for validations to apply to the definition.
  required:
    - name
    - fields
  validation:
    - name: Root key is defined
    - name: Required fields are present
---
schema:
  name: Behavior
  fields:
    - name: name
      type: string
      description: |
        The name of the behavior.
    - name: type
      type: BehaviorType
      description: |
        The type of behavior.
    - name: description
      type: string
      description: |
        An explanatory description of the behavior, including what the behavior
        is, why it exists, etc.
    - name: tags
      type: string[]
      description: |
        Tags associated with the behavior. These could be used to group similar
        behaviors into categories like "timing", "network", etc.
    - name: input
      type: Field[]
      description: |
        The list of all the fields that are inputs to the component when the
        behavior is performed.
    - name: output
      type: Field[]
      description: |
        The list of all the fields that are outputs to the component when the
        behavior is performed.
    - name: acceptance
      type: Scenario[]
      description: |
        A list of scenarios that define the acceptance criteria to signify that
        the system is behaving as expected.
  required:
    - name
    - type
---
schema:
  name: model
  fields:
    - name: name
      type: string
      description: |
        The name of the model.
    - name: description
      type: string
      description: |
        An explanatory description for the model including what the
        component/system is modeling and any other relevant information.
    - name: components
      type: Field[]
      description: |
        A list of models that are components of the system.
    - name: behavior
      type: Behavior[]
      description: |
        A list of behaviors that the system being modeled will perform.
    - name: state
      type: Field[]
      description: |
        A list of data items representing internal state of the modeled
        entity. State is visible within the model but is not
        visible to other models. State may be visible between multiple
        instances of the modeled entity to support horizontal scaling.
  required:
    - name
  validation:
    - name: Subcomponents are models
---
schema:
  name: usecase
  fields:
    - name: name
      type: string
      description: |
        The name of the use case.
    - name: description
      type: string
      description: |
        An explanatory description of the use case to include what purpose the
        use case serves, design ideas when fulfilling the use case, etc.
    - name: participants
      type: Field[]
      description: |
        A list of participants in the use case.

        Generally, these would be users, other systems, etc. that are
        interacting with the system during the course of the use case.
    - name: steps
      type: Step[]
      description: |
        A list of steps taken in the use case.

        See 'Step'
  required:
    - name
    - participants
    - steps
---
schema:
  name: Step
  fields:
    - name: step
      type: string
      description: |
        The name of the step.
    - name: source
      type: string
      description: |
        The source for the step. This should be the name of a participant - i.e.
        a modeled system component.
    - name: target
      type: string
      description: |
        The target for the step. This should be the name of a participant - i.e.
        a modeled system component.
    - name: action
      type: string
      description: |
        A behavior reference on the target or a subordinate use case definition.
    - name: if
      type: Branch
      description: |
        Used to create an "alt" in a sequence diagram.
    - name: else
      type: Branch
      description: |
        Used to create the "lower cell" in an "alt" in a sequence diagram.
    - name: loop
      type: Branch
      description: |
        Used to create a loop in a sequence diagram.
---
schema:
  name: Branch
  fields:
    - name: condition
      type: string
      description: |
        A condition to test whether a sequence of steps should be performed.
    - name: steps
      type: Step[]
      description: |
        A list of steps to perform if the condition for the branch is "true".
  required:
    - condition
    - steps
---
schema:
  name: Map
  description: Defines a map/key-value pair data structure, and the typing.
  fields:
    - name: name
      type: string
      description: The name of the Map type
    - name: key_type
      type: string
      description: The key type for elements in the map.
    - name: value_type
      type: string
      description: The value type for elements in the map.
  validation:
    - name: Required fields are present
  required:
    - name
    - key_type
    - value_type
---
schema:
  name: KeyValuePair
  description: Defines a key-value pair, use in list to create key-value pairs in AaC.
  fields:
    - name: key
      type: string
      description: The key map entry.
    - name: value
      type: string
      description: The value map entry.
  validation:
    - name: Required fields are present
  required:
    - key
    - value
