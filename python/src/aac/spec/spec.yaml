schema:
  name: Import
  root: import
  description: |
    A definition that represents the list of imported files containing
    externally-defined definitions that are referenced in the current file.
  fields:
    - name: files
      type: file[]
  validation:
    - name: Required fields are present
      arguments:
        - files
---
schema:
  name: Enum
  root: enum
  description: |
    A definition that represents an enumerated type of value.

    An example of when to use an 'enum' is when you want to provide several
    different options for a single value.
  fields:
    - name: name
      type: string
      description: |
        The name of the enumeration.
    - name: values
      type: string[]
      description: |
        A list of strings that encompass the enumeration's possible values.
    - name: validation
      type: ValidationReference[]
      description: |
        References and additional arguments for validations to apply to enum.
  validation:
    - name: Required fields are present
      arguments:
        - name
        - values
---
schema:
  name: Extension
  root: ext
  description: |
    A meta definition used for adding information to another definition.

    An example of when to use an 'ext' is when you wish to add extra
    information to a model that isn't included in the core specification or
    the specification of any plugins you may have installed.

    You can extend any 'enum' and 'schema' definition.
  fields:
    - name: name
      type: string
      description: |
        The name of the extension.
    - name: type
      type: reference
      description: |
        The name of the 'schema' or 'enum' definition that this definition is
        extending.
    - name: enumExt
      type: EnumExtension
      description: |
        If extending an 'enum' definition, this represents a list of the items
        to add to the 'enum's 'values' property.

        Note: Only one of 'enumExt' and 'schemaExt' are valid per extension.

        See also, 'EnumExtension'
    - name: schemaExt
      type: SchemaExtension
      description: |
        If extending an 'schema' definition, this represents a list of the items
        to add to the 'schema's 'fields' property.

        Note: Only one of 'enumExt' and 'schemaExt' are valid per extension.

        See also, 'SchemaExtension'
  validation:
    - name: Mutually exclusive fields
      arguments:
        - schemaExt
        - enumExt
    - name: Required fields are present
      arguments:
        - name
        - type
---
schema:
  name: EnumExtension
  fields:
    - name: add
      type: string[]
      description: |
        The list of values to add to an 'enum' extension.
  validation:
    - name: Required fields are present
      arguments:
        - add
---
schema:
  name: SchemaExtension
  fields:
    - name: add
      type: Field[]
      description: |
        The list of fields to add to a 'schema' extension.
    - name: required
      type: string[]
      description: |
        The list of names of all the additional fields that are required for the
        extended definition.
  validation:
    - name: Required fields are present
      arguments:
        - add
---
schema:
  name: Validation
  root: validation
  description: |
    A reference to a validation plugin. Validation plugins provide
    verification and validation for the definition to which they are
    attached and any uses of that definition, depending on the validation
    plugins referenced by it.

    Validators are referenced by name.
  fields:
    - name: name
      type: string
      description: |
        The name of the validation rule and plugin.
    - name: description
      type: string
      description: |
        A high-level description of the validation plugin.
    - name: behavior
      type: Behavior[]
      description: |
        A list of behaviors that the validation plugin will perform.
  validation:
    - name: Validation definition has an implementation
    - name: Required fields are present
      arguments:
        - name
        - description
        - behavior
---
schema:
  name: ValidationReference
  fields:
    - name: name
      type: reference
      description: The name of the validation definition.
    - name: arguments
      type: string[]
      description: A list of arguments to pass to the validator.
---
schema:
  name: ValidatorInput
  fields:
    - name: name
      type: string
      description: |
        The name of the input to the validation rule and plugin.
---
schema:
  name: ValidatorOutput
  fields:
    - name: name
      type: string
      description: |
        The name of the output from the validation rule and plugin.
---
schema:
  name: Scenario
  fields:
    - name: scenario
      type: string
      description: |
        The name of the scenario.
    - name: tags
      type: string[]
      description: |
        Tags associated with the scenario. These could be used to group similar
        scenarios into categories like "front-end", "back-end", etc.
    - name: given
      type: string[]
      description: |
        A list of preconditions that must be true in order for the scenario to
        perform the expected action or provide the expected result.
    - name: when
      type: string[]
      description: |
        A list of triggers that indicate some reason for the system to act in a
        certain way or provide some result.
    - name: then
      type: string[]
      description: |
        A list of post conditions that will be true once the system has completed
        its action based on the triggers.
  validation:
    - name: Required fields are present
      arguments:
        - scenario
        - when
        - then
---
enum:
  name: BehaviorType
  values:
    - PUB_SUB
    - REQUEST_RESPONSE
    - STARTUP
    - TIMER
    - LOGGING
  validation:
    - name: Enum value is defined
---
enum:
  name: Primitives
  values:
    - string
    - int
    - number
    - bool
    - date
    - file
    - directory
    - reference
  validation:
    - name: Enum value is defined
---
schema:
  name: Field
  fields:
    - name: name
      type: string
      description: |
        The name of the field.

        Used to refer to the field, in certain cases.
    - name: type
      type: string
      description: |
        The type of the field.

        Used to constrain the field's values to make it simpler to reason about. Must
        reference an existing definition by name.
    - name: description
      type: string
      description: |
        A description for the field to let users know what it's for and any
        other useful information.
  validation:
    - name: Required fields are present
      arguments:
        - name
        - type
    - name: Type references exist
      arguments:
        - type
---
schema:
  name: Schema
  root: schema
  description: |
    A definition that defines the schema/structure of definitions.

    A 'schema' definition can alternatively be thought as a defining the
    data structure of a definition.
  fields:
    - name: name
      type: string
      description: |
        The name of the schema definition.
    - name: root
      type: string
      description: |
        The yaml key used to represent the type when defined at the root of the AaC model file.
    - name: description
      type: string
      description: |
        Allows users to add some text to describe their definition.
    - name: inherits
      type: reference[]
      description: |
        A list of Schema definition names that this definition inherits from.
    - name: fields
      type: Field[]
      description: |
        A list of fields that make up the definition.
    - name: validation
      type: ValidationReference[]
      description: |
        References and additional arguments for validations to apply to the definition.
    - name: requirements
      type: RequirementReference
      description: |
        A list of requirements that define the characteristics to be satisfied by the schema.
  validation:
    - name: Root key is defined
    - name: Disallow undefined fields
    - name: Required fields are present
      arguments:
        - name
        - fields
    - name: Unique definition names
    - name: Definition is referenced
---
schema:
  name: Behavior
  fields:
    - name: name
      type: string
      description: |
        The name of the behavior.
    - name: type
      type: BehaviorType
      description: |
        The type of behavior.
    - name: description
      type: string
      description: |
        An explanatory description of the behavior, including what the behavior
        is, why it exists, etc.
    - name: tags
      type: string[]
      description: |
        Tags associated with the behavior. These could be used to group similar
        behaviors into categories like "timing", "network", etc.
    - name: input
      type: Field[]
      description: |
        The list of all the fields that are inputs to the component when the
        behavior is performed.
    - name: output
      type: Field[]
      description: |
        The list of all the fields that are outputs to the component when the
        behavior is performed.
    - name: acceptance
      type: Scenario[]
      description: |
        A list of scenarios that define the acceptance criteria to signify that
        the system is behaving as expected.
    - name: requirements
      type: RequirementReference
      description: |
        A list of allocated requirements defining the expected behavior to be provided.
  validation:
    - name: Required fields are present
      arguments:
        - name
        - type
---
schema:
  name: Model
  root: model
  description: |
    A definition that represents a system and/or component model.

    An example of when to use a 'model' is when you want to define the
    behavior for some component of the system.
  fields:
    - name: name
      type: string
      description: |
        The name of the model.
    - name: description
      type: string
      description: |
        An explanatory description for the model including what the
        component/system is modeling and any other relevant information.
    - name: components
      type: Field[]
      description: |
        A list of models that are components of the system.
    - name: behavior
      type: Behavior[]
      description: |
        A list of behaviors that the system being modeled will perform.
    - name: state
      type: Field[]
      description: |
        A list of data items representing internal state of the modeled entity.
        State is visible within the model but is not visible to other models.
        State may be visible between multiple instances of the modeled entity to
        support horizontal scaling.
    - name: requirements
      type: RequirementReference
      description: |
        A reference to requirements relevant to the modeled item.
  validation:
    - name: Subcomponents are models
    - name: Required fields are present
      arguments:
        - name
---
schema:
  name: Usecase
  root: usecase
  description: |
    A definition that represents a usecase for the system.

    An example of when to use a 'usecase' is when you want to define how the
    system might be used in a particular instance.
  fields:
    - name: name
      type: string
      description: |
        The name of the use case.
    - name: description
      type: string
      description: |
        An explanatory description of the use case to include what purpose the
        use case serves, design ideas when fulfilling the use case, etc.
    - name: participants
      type: Field[]
      description: |
        A list of participants in the use case.

        Generally, these would be users, other systems, etc. that are
        interacting with the system during the course of the use case.
    - name: steps
      type: Step[]
      description: |
        A list of steps taken in the use case.

        See 'Step'
  validation:
    - name: Required fields are present
      arguments:
        - name
        - participants
        - steps
    - name: Usecase sources and targets refer to defined participants
    - name: Usecase actions refer to defined model behaviors
---
schema:
  name: Step
  fields:
    - name: step
      type: string
      description: |
        The name of the step.
    - name: source
      type: string
      description: |
        The source for the step. This should be the name of a participant - i.e.
        a modeled system component.
    - name: target
      type: string
      description: |
        The target for the step. This should be the name of a participant - i.e.
        a modeled system component.
    - name: action
      type: string
      description: |
        A behavior reference on the target or a subordinate use case definition.
    - name: if
      type: Branch
      description: |
        Used to create an "alt" in a sequence diagram.
    - name: else
      type: Branch
      description: |
        Used to create the "lower cell" in an "alt" in a sequence diagram.
    - name: loop
      type: Branch
      description: |
        Used to create a loop in a sequence diagram.
---
schema:
  name: Branch
  fields:
    - name: condition
      type: string
      description: |
        A condition to test whether a sequence of steps should be performed.
    - name: steps
      type: Step[]
      description: |
        A list of steps to perform if the condition for the branch is "true".
  validation:
    - name: Required fields are present
      arguments:
        - condition
        - steps
---
schema:
  name: CommandGroup
  root: command_group
  description: |
    A reference to a command group under which one, or more, plugins can
    nest related commands.

    CommandGroups are referenced by name.
  fields:
    - name: name
      type: string
      description: The name of the command group.
    - name: display
      type: string
      description: |
        The display name of the command group for use in user interfaces. If not
        provided, 'name' will be used.
    - name: helpText
      type: string
      description: |
        The text that will be displayed as help text when displaying command
        group usage.
  validation:
    - name: Required fields are present
      arguments:
        - name
        - helpText
---
schema:
  name: PluginCommand
  fields:
    - name: name
      type: string
      description: The name of the command.
    - name: display
      type: string
      description: |
        The display name of the command for use in user interfaces. If not
        provided, 'name' will be used.
    - name: group
      type: reference
      description: The command group under which to place this command.
    - name: helpText
      type: string
      description: |
        A description that will be displayed as help text when displaying
        command usage.
    - name: input
      type: Field[]
      description: |
        The list of all the fields that are inputs to the component when the
        command is executed.
    - name: output
      type: Field[]
      description: |
        The list of all the fields that are outputs from the component when the
        command is executed.
    - name: acceptance
      type: Scenario[]
      description: |
        A list of scenarios that define the acceptance criteria to signify that
        the command is behaving as expected.
  validation:
    - name: Required fields are present
      arguments:
        - name
        - helpText
        - acceptance
---
schema:
  name: Plugin
  root: plugin
  description: |
    A reference to a plugin. Plugins can provide any extra functionality
    desired on top of AaC-modeled systems from document generation to code
    generation and everything in between.

    Plugins are referenced by name.
  fields:
    - name: name
      type: string
    - name: description
      type: string
    - name: commands
      type: PluginCommand[]
    - name: definitionSources
      type: file[]
    - name: definitionValidations
      type: ValidationReference[]
    - name: primitiveValidations
      type: ValidationReference[]
  validation:
    - name: Required fields are present
      arguments:
        - name
        - description
---
command_group:
  name: Generation
  display: gen
  helpText: Commands used for generating artifacts.
---
command_group:
  name: Management
  display: mgmt
  helpText: Commands that enable management of AaC data.
---
command_group:
  name: Internal
  display: internal
  helpText: Internal commands not intended for use by end-users or non-AaC developers.
---
command_group:
  name: Backend
  display: backend
  helpText: Commands that enable a client/server style workflow.
---
command_group:
  name: Query
  display: show
  helpText: Commands whose purpose is to show specific information.
---
schema:
  name: Specification
  root: spec
  description: |
    A requirement specification definition to capture desired behavior or attributes of the system being modeled.

    Within many contexts requirements remain the central element of any Model-Based System Engineering solution.
    AaC supports the definition, derivation, and trace of requirements throughout the model using the spec type and
    associated reference capabilities.
  fields:
    - name: name
      type: string
    - name: description
      type: string
    - name: sections
      type: SpecSection[]
    - name: requirements
      type: Requirement[]
  validation:
    - name: Required fields are present
      arguments:
        - name
---
schema:
  name: SpecSection
  fields:
    - name: name
      type: string
    - name: description
      type: string
    - name: requirements
      type: Requirement[]
  validation:
    - name: Required fields are present
      arguments:
        - name
---
schema:
  name: Requirement
  fields:
    - name: id
      type: string
    - name: shall
      type: string
    - name: parent
      type: RequirementReference
    - name: child
      type: RequirementReference
    - name: attributes
      type: RequirementAttribute[]
  validation:
    - name: Required fields are present
      arguments:
        - id
        - shall
    - name: Requirement ID is unique
      arguments:
        - id
---
schema:
  name: RequirementAttribute
  fields:
    - name: name
      type: string
    - name: value
      type: string
  validation:
    - name: Required fields are present
      arguments:
        - name
        - value
---
schema:
  name: RequirementReference
  fields:
    - name: ids
      type: string[]
  validation:
    - name: Required fields are present
      arguments:
        - ids
    - name: Referenced IDs exist
      arguments:
        - ids
