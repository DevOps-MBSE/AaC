"""AaC Plugin implementation module for the start-lsp plugin."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by the aac gen-plugin, and it won't be overwritten if the file already exists.

import logging

from typing import Optional

from pygls.server import LanguageServer

from aac.lang.server import setup_features
from aac.plugins.plugin_execution import PluginExecutionResult, plugin_result

plugin_name = "start-lsp"

logger: Optional[logging.Logger] = None
server: Optional[LanguageServer] = None

def start_lsp(dev: bool = False) -> PluginExecutionResult:
    """Start the LSP server.

    Args:
        dev (bool): Whether to start the server and setup logging for development. (optional)
    """

    def start():
        global server, logger

        server = server or LanguageServer()
        setup_features(server)

        _setup_logger(logging.DEBUG if dev else logging.INFO)
        logger.info("Starting the AaC LSP server")

        server.start_io()

    with plugin_result("lsp", start) as result:
        result.messages = [m for m in result.messages if m]
        return result


def _setup_logger(log_level: int) -> None:
    """Configure the logger.

    Args:
        log_level (int): The logging level to use for the logger.
    """
    global logger
    logging.basicConfig(level=log_level)
    logger = logging.getLogger(__name__)
