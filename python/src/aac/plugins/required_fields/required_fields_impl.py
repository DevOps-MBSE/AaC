"""The AaC Required Fields plugin implementation module."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

from aac.execute.aac_execution_result import ExecutionResult, ExecutionStatus, LanguageError
from aac.lang.plugininputvalue import PluginInputValue
from aac.context.language_context import LanguageContext
from aac.context.definition import Definition
from typing import Any


plugin_name = "Required Fields"


def required_fields_are_present(
    definition: Definition, arguments: list[PluginInputValue]
) -> ExecutionResult:
    """Business logic for the Required fields are present constraint."""

    status = ExecutionStatus.SUCCESS
    messages: list[str] = []

    context = LanguageContext()

    # we'll need to resurse our way through the schema to check all the fields and sub-fields
    def check_schema_fields(instance_to_check: Any, defining_schema: Definition):
        """Check that all required fields are present in the instance_to_check based on the defining_schema."""

        # Loop through all fields in the definiing schema
        for field in defining_schema.instance.fields:
            # If the field is required, check that it is present
            if field.is_required:
                # Check that the field is present
                if field.name not in list(vars(instance_to_check).keys()):
                    status = ExecutionStatus.CONSTRAINT_FAILURE
                    messages.append(f"Field '{field.name}' is required but not present.")
            # now recurse into any nested schemas
            if field.type not in [primitive.name for primitive in context.get_primitives()]:
                # we have a schema, so we're recurse and check it's fields
                field_defining_schema = context.get_definition_by_name(field.type)
                if not field_defining_schema:
                    raise LanguageError(f"Could not find schema for field: {field.name} of type: {field.type}")
                field_instance = getattr(instance_to_check, field.name)
                if field_instance:  # not all fields are required, so only check if the field is present
                    check_schema_fields(field_instance, field_defining_schema)

    # get the defining schema
    defining_schema = context.get_definition_for_root_key(definition.get_root_key())
    check_schema_fields(definition, defining_schema)

    return ExecutionResult(plugin_name, "Required fields are present", status, messages)
