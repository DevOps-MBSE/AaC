"""AaC Plugin implementation module for the {{plugin.name}} plugin."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by the aac gen-plugin, and it won't be overwritten if the file already exists.

from aac.plugins.plugin_execution import PluginExecutionResult, plugin_result

plugin_name = "{{plugin.name}}"
{% for command in commands %}
{%+ set comma_joiner = joiner(", ") %}

def {{command.implementation_name}}({% for command_input in command.input %}{{comma_joiner()}}{{command_input.name | trim('-') }}: {{command_input.python_type}}{% endfor %}) -> PluginExecutionResult:
    """
    {% if command.helpText is defined %}
    {{command.helpText}}
    {% else %}
    TODO: Write a description
    {% endif %}
    {% if command.input is defined %}

    Args:
    {%- for command_input in command.input +%}
        {{command_input.name | trim('-')}} ({{command_input.type}}): {% if command_input.description is defined %} {{command_input.description}} {% else %} TODO add a helpful parameter description {% endif %}
    {% endfor +%}
    {% endif %}
    {% if command.output is defined %}

    Returns:
    {%- for command_output in command.output +%}
        {{command_output.name}} ({{command_output.type}}): {% if command_output.description is defined %} {{command_output.description}} {% else %} TODO add a helpful parameter description {% endif %}
    {% endfor +%}
    {% endif %}
    """
    # TODO add implementation here
    def _implement_and_rename_me():
        raise NotImplementedError("{{command.implementation_name}} is not implemented.")

    with plugin_result(plugin_name, _implement_and_rename_me) as result:
        return result
{% endfor %}
