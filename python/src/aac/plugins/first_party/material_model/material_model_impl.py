"""AaC Plugin implementation module for the material-model plugin."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by the aac gen-plugin, and it won't be overwritten if the file already exists.
import csv
from os import path, makedirs
from typing import List

from aac.plugins.plugin_execution import PluginExecutionResult, plugin_result
from aac.validate import validated_source
from aac.lang.definitions.definition import Definition

plugin_name = "material-model"


def gen_bom(architecture_file: str, output_directory: str) -> PluginExecutionResult:
    """
    Generates a CSV Bill of Materials (BOM) from a list of deployment models.

    Args:
        architecture_file (str): The deployment model to convert into a BOM.
        output_directory (str): The directory where the BOM file should be placed.
    """
    # TODO add implementation here
    def generate_bom():
        definitions = _get_parsed_models(architecture_file)
        root_deployments = {}

        for definition in definitions:
            if definition.get_root_key() in ["deployment"]:
                root_deployments[definition.name] = definition
                print(f"Found deployment: {definition.name}")

        print(f"root_deployments = {root_deployments.keys()}")

        field_names = ["A", "B", "C", "D", "E", "F"]

        # just in case, let's make sure the output directory exists
        if not path.lexists(output_directory):
            makedirs(output_directory)


        return f"{len([])} BOM line items written to {output_directory}"

    with plugin_result(plugin_name, generate_bom) as result:
        return result


def _get_parsed_models(architecture_file: str) -> List[Definition]:
    with validated_source(architecture_file) as result:
        return result.definitions
