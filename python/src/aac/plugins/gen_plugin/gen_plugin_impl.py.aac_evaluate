"""The AaC Gen Plugin plugin implementation module."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

# There may be some unused imports depending on the definition of the plugin...but that's ok
from aac.execute.aac_execution_result import (
    ExecutionResult,
    ExecutionStatus,
    ExecutionMessage,
)
from aac.lang.schema import Schema
from aac.lang.plugininputvalue import PluginInputValue
from aac.context.language_context import LanguageContext
from aac.context.definition import Definition
from aac.io.files.aac_file import AaCFile
from aac.context.source_location import SourceLocation
from typing import Any


plugin_name = "Gen Plugin"


def before_gen_plugin_check(
    aac_plugin_file: str,
    code_output: str,
    test_output: str,
    doc_output: str,
    no_prompt: bool,
    force_overwrite: bool,
    evaluate: bool,
    run_check,
) -> ExecutionResult:
    """Run the CheckAaC  command before the gen-plugin command."""

    # TODO: configure and call the check before command using gen-plugin command inputs
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The CheckAaC check before handling for the gen-plugin command has not been implemented yet.",
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "gen-plugin", status, messages)


def gen_plugin(
    aac_plugin_file: str,
    code_output: str,
    test_output: str,
    doc_output: str,
    no_prompt: bool,
    force_overwrite: bool,
    evaluate: bool,
) -> ExecutionResult:
    """Business logic for the gen-plugin command."""

    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The gen-plugin command for the Gen Plugin plugin has not been implemented yet.",
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "gen-plugin", status, messages)


def after_gen_plugin_generate(
    aac_plugin_file: str,
    code_output: str,
    test_output: str,
    doc_output: str,
    no_prompt: bool,
    force_overwrite: bool,
    evaluate: bool,
    run_generate,
) -> ExecutionResult:
    """Run the Generate generate command after the gen-plugin command."""

    # TODO: configure and call the generate after command using gen-plugin command inputs
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The Generate generate after handling for the gen-plugin command has not been implemented yet.",
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "gen-plugin", status, messages)


def before_gen_project_check(
    aac_project_file: str,
    output: str,
    no_prompt: bool,
    force_overwrite: bool,
    evaluate: bool,
    run_check,
) -> ExecutionResult:
    """Run the CheckAaC  command before the gen-project command."""

    # TODO: configure and call the check before command using gen-project command inputs
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The CheckAaC check before handling for the gen-project command has not been implemented yet.",
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "gen-project", status, messages)


def gen_project(
    aac_project_file: str,
    output: str,
    no_prompt: bool,
    force_overwrite: bool,
    evaluate: bool,
) -> ExecutionResult:
    """Business logic for the gen-project command."""

    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The gen-project command for the Gen Plugin plugin has not been implemented yet.",
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "gen-project", status, messages)


def after_gen_project_generate(
    aac_project_file: str,
    output: str,
    no_prompt: bool,
    force_overwrite: bool,
    evaluate: bool,
    run_generate,
) -> ExecutionResult:
    """Run the Generate generate command after the gen-project command."""

    # TODO: configure and call the generate after command using gen-project command inputs
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The Generate generate after handling for the gen-project command has not been implemented yet.",
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "gen-project", status, messages)
