from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators
from aac.execute.aac_execution_result import LanguageError
{% for field in schema.fields%}{% if get_python_primitive(field.type) == "None"%}{% if field.type.endswith('[]')%}
from {{get_package_from_aac_definition('schema', field.type[:-2])}}.{{get_python_name(field.type[:-2])}} import {{field.type[:-2]}}{% else %}
from {{get_package_from_aac_definition('schema', field.type)}}.{{get_python_name(field.type)}} import {{field.type}}{% endif %}{% endif %}{% endfor %}

@dataclass(frozen=True)
class {{ schema.name }}():
    """
    {% if schema.description %}{{schema.description}}{% else %}Autogenerated {{schema.name}} AaC schema{% endif %}{{"\n\n"}}{% for field in schema.fields %}{{"    "}}{{field.name}}: {{get_python_type(field.type)}} - {{field.description}}{% endfor %}
    """
    {% for field in schema.fields %}
    {% if field.type.endswith('[]')%}{{field.name}}: {{get_python_type(field.type)}} = attrib(init=attr.ib(), validator=validators.instance_of({{get_python_type(field.type)}})){% elif field.is_required%}{{field.name}}: {{get_python_type(field.type)}} = attrib(init=attr.ib(), validator=validators.instance_of({{get_python_type(field.type)}})){% else %}{{field.name}}: Optional[{{get_python_type(field.type)}}] = attrib(init=attr.ib(), validator=validators.optional(validators.instance_of({{get_python_type(field.type)}}))){% endif %}{% endfor %}

    @classmethod
    def from_dict(cls, data):
        {% for field in schema.fields %}{% if get_python_primitive(field.type) != "None"%}{% if field.type.endswith('[]') %}{{get_python_name(field.name)}} = data.pop("{{field.name}}", []){% elif not field.is_required %}{{get_python_name(field.name)}} = data.pop("{{field.name}}", None){% endif %}{% else %}{% if field.type.endswith('[]') %}{{get_python_name(field.name)}}_data = data.pop("{{field.name}}", [])
        {{get_python_name(field.name)}} = [{{field.type[:-2]}}.from_dict(entry) for entry in {{get_python_name(field.name)}}_data]{% else %}{{get_python_name(field.name)}}_data = data.pop("{{field.name}}", None)
        {{get_python_name(field.name)}} = {{field.type}}.from_dict({{get_python_name(field.name)}}_data) if {{get_python_name(field.name)}}_data else None{% endif %}{% endif %}
        {% endfor %}

        return cls({% for field in schema.fields %}{% if field.type.endswith('[]')%}{{get_python_name(field.name)}}={{get_python_name(field.name)}}, {% elif not field.is_required %}{{get_python_name(field.name)}}={{get_python_name(field.name)}}, {% endif %}{% endfor %}**data)
