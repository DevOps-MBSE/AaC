"""Python module for the {{schema.name}} class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.
{% set comma_joiner = joiner(", ") %}
from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators
{% if schema.extends | length > 0 %}
{% for extension in schema.extends %}from {{extension.package}}.{{get_python_name(extension.name)}} import {{extension.name}}{{"\n"}}
{% endfor %}{% endif %}
{% for field in schema.fields%}{% if get_python_primitive(field.type) == "None"%}{% if field.type.endswith('[]')%}from {{get_package_from_aac_definition(field.type[:-2])}}.{{get_python_name(field.type[:-2])}} import {{field.type[:-2]}}{{"\n"}}{% else %}from {{get_package_from_aac_definition(field.type)}}.{{get_python_name(field.type)}} import {{field.type}}{{"\n"}}{% endif %}{% endif %}{% endfor %}

@dataclass(frozen=True)
class {{ schema.name }}({% if schema.extends | length > 0 %}{% for extension in schema.extends%}{{ comma_joiner() }}{{extension.name}}{% endfor %}{% endif %}):
    """
    {% if schema.description %}{{schema.description.replace('\n', ' ')}}{% else %}Autogenerated {{schema.name}} AaC schema{% endif %}
    {% for field in schema.fields %}
    {% if get_python_primitive(field.type) == 'None' %}{% if field.type.endswith('[]')%}{{field.name}}: {{get_python_type(field.type)}}] - {% if field.description %}{{field.description.replace('\n', ' ')}}{% endif %}{% elif field.is_required%}{{field.name}}: {{get_python_type(field.type)}} - {% if field.description %}{{field.description.replace('\n', ' ')}}{% endif %}{% else %}{{field.name}}: Optional[{{get_python_type(field.type)}}] - {% if field.description %}{{field.description.replace('\n', ' ')}}{% endif %}{% endif %}{% else %}{% if field.type.endswith('[]')%}{{field.name}}: list[{{get_python_primitive(field.type[:-2])}}] - {% if field.description %}{{field.description.replace('\n', ' ')}}{% endif %}{% elif field.is_required%}{{field.name}}: {{get_python_primitive(field.type)}} - {% if field.description %}{{field.description.replace('\n', ' ')}}{% endif %}{% else %}{{field.name}}: Optional[{{get_python_primitive(field.type)}}] - {% if field.description %}{{field.description.replace('\n', ' ')}}{% endif %}{% endif %}{% endif %}{% endfor %}
    """
    {% for field in schema.fields %}
    {% if get_python_primitive(field.type) == 'None' %}{% if field.type.endswith('[]')%}{{field.name}}: {{get_python_type(field.type)}} = attrib(init=attr.ib(), validator=validators.instance_of({{get_python_type(field.type)}})){% elif field.is_required%}{{field.name}}: {{get_python_type(field.type)}} = attrib(init=attr.ib(), validator=validators.instance_of({{get_python_type(field.type)}})){% else %}{{field.name}}: Optional[{{get_python_type(field.type)}}] = attrib(init=attr.ib(), validator=validators.optional(validators.instance_of({{get_python_type(field.type)}}))){% endif %}{% else %}{% if field.type.endswith('[]')%}{{field.name}}: list[{{get_python_primitive(field.type[:-2])}}] = attrib(init=attr.ib(), validator=validators.instance_of(list[{{get_python_primitive(field.type)}}])){% elif field.is_required%}{{field.name}}: {{get_python_primitive(field.type)}} = attrib(init=attr.ib(), validator=validators.instance_of({{get_python_primitive(field.type)}})){% else %}{{field.name}}: Optional[{{get_python_primitive(field.type)}}] = attrib(init=attr.ib(), validator=validators.optional(validators.instance_of({{get_python_primitive(field.type)}}))){% endif %}{% endif %}{% endfor %}

    @classmethod
    def from_dict(cls, data):
        args = {}
        {% for field in schema.fields %}
        {% if get_python_primitive(field.type) != "None"%}
        {% if field.type.endswith('[]') %}
        {{get_python_name(field.name)}} = data.pop("{{field.name}}", [])
        args["{{get_python_name(field.name)}}"] = {{get_python_name(field.name)}}
        {% elif not field.is_required %}
        {{get_python_name(field.name)}} = data.pop("{{field.name}}", None)
        args["{{get_python_name(field.name)}}"] = {{get_python_name(field.name)}}
        {% endif %}
        {% else %}
        {% if field.type.endswith('[]') %}
        {{get_python_name(field.name)}}_data = data.pop("{{field.name}}", [])
        {{get_python_name(field.name)}} = [{{field.type[:-2]}}.from_dict(entry) for entry in {{get_python_name(field.name)}}_data]
        args["{{get_python_name(field.name)}}"] = {{get_python_name(field.name)}}
        {% else %}
        {{get_python_name(field.name)}}_data = data.pop("{{field.name}}", None)
        {{get_python_name(field.name)}} = {{field.type}}.from_dict({{get_python_name(field.name)}}_data) if {{get_python_name(field.name)}}_data else None
        args["{{get_python_name(field.name)}}"] = {{get_python_name(field.name)}}
        {% endif %}
        {% endif %}
        {% endfor %}

        return cls(**args, **data)
