"""__init__.py module for the {{plugin.name}} plugin."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from os.path import join, dirname
from aac.execute.plugin_runner import AacCommand
{% set comma_joiner = joiner(", ") %}
{% if commands | length > 0 %}
from aac.plugins.version.{{name}}_impl import plugin_name, {% for command in commands %}{{comma_joiner()}}{{command.implementation_name}}}{% endfor %}
{% else %}
from aac.plugins.version.{{name}}_impl import plugin_name
{% endif %}
from aac.execute import hookimpl
from aac.context.language_context import LanguageContext
from aac.execute.plugin_runner import PluginRunner

{{name}}_aac_file_name = "version.aac"

@hookimpl
def register_plugin() -> None:
    """
    Returns information about the plugin.

    Returns:
        A collection of information about the plugin and what it contributes.
    """
    
    active_context = LanguageContext()
    {{name}}_aac_file = join(dirname(__file__), {{name}}_aac_file_name)
    definitions = active_context.parse_and_load({{name}}_aac_file)
    
    {{name}}_plugin_definition = [definition for definition in definitions if definition.name == plugin_name][0]
    
    plugin_runner = PluginRunner(plugin_definition={{name}}_plugin_definition)
    {% for command in commands%}
    plugin_runner.add_command_callback({{command.name}}, {{command.name}})
    
    active_context.register_plugin_runner(plugin_runner)

























_______________________________________________________________________________________________________________________
from aac.cli.aac_command import AacCommand, AacCommandArgument
from aac.plugins import hookimpl
from aac.plugins.plugin import Plugin
{% if plugin_definitions | length > 0 %}
from aac.plugins._common import get_plugin_definitions_from_yaml
{% endif %}
{% set comma_joiner = joiner(", ") %}
{% if commands | length > 0 %}
from aac.plugins.{{architecture_file.package_name}}.{{plugin.implementation_name}}_impl import plugin_name, {% for command in commands %}{{comma_joiner()}}{{command.implementation_name}}{% endfor %}
{% endif %}


@hookimpl
def get_plugin() -> Plugin:
    """
    Returns information about the plugin.

    Returns:
        A collection of information about the plugin and what it contributes.
    """
    plugin = Plugin(plugin_name)
    {% if commands | length > 0 %}
    plugin.register_commands(_get_plugin_commands())
    {% endif %}
    {% if plugin_definitions | length > 0 %}
    plugin.register_definitions(_get_plugin_definitions())
    {% endif %}
    return plugin
{% if commands | length > 0 %}
{# Leave a blank line here since we want 2 space if the expression is true and one if it's false#}

def _get_plugin_commands():
    {% for command in commands %}
    {% if command.input is defined %}
    {{command.implementation_name}}_arguments = [
    {% for command_input in command.input %}
        AacCommandArgument(
            "{{command_input.name}}",
            {%+ if command_input.description is defined %}"{{command_input.description}}"{% else %}"TODO: fill me out"{% endif %},
            "{{command_input.type}}",
            {% if command_input.number_of_arguments is defined %}number_of_arguments={{command_input.number_of_arguments}},{% endif %}
            {% if command_input.default is defined %}default={{command_input.default}},{% endif %}
        ),
    {% endfor %}
    ]
    {% endif %}
    {% endfor %}

    plugin_commands = [
        {% for command in commands %}
        AacCommand(
            "{{command.name}}",
            "{{command.helpText}}",
            {{command.implementation_name}}{% if command.input is defined %},
            {{command.implementation_name}}_arguments,{% endif +%}
        ),
        {% endfor %}
    ]

    return plugin_commands
{% endif %}
{% if plugin_definitions | length > 0 %}
{# Leave a blank line here since we want 2 space if the expression is true and one if it's false#}

def _get_plugin_definitions():
    return get_plugin_definitions_from_yaml(__package__, "{{architecture_file.name}}")

{% endif %}
