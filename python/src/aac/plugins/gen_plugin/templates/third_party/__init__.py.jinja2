"""The {{plugin.name}} plugin module."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

from aac.cli.aac_command import AacCommand, AacCommandArgument
{%- if plugin_definitions | length > 0 %}
from aac.io.parser import parse
from aac.package_resources import get_resource_file_contents, get_resource_file_path
{%- endif %}
from aac.plugins import hookimpl
from aac.plugins.plugin import Plugin
{%- set comma_joiner = joiner(", ") %}
{%- if commands | length > 0 %}
from {{plugin.implementation_name}}.{{plugin.implementation_name}}_impl import {% for command in commands -%}{{comma_joiner()}}{{command.implementation_name}}{%- endfor %}
{%- endif %}


@hookimpl
def get_plugin() -> Plugin:
    """
    Returns information about the plugin.

    Returns:
        A collection of information about the plugin and what it contributes.
    """
    *_, plugin_name = __package__.split(".")
    plugin = Plugin(plugin_name)
    {%- if commands | length > 0 %}
    plugin.register_commands(_get_plugin_commands())
    {%- endif %}
    {%- if plugin_definitions | length > 0 %}
    plugin.register_definitions(_get_plugin_definitions())
    {%- endif %}
    return plugin
{%- if commands | length > 0 %}
{# Leave a blank line here since we want 2 space if the expression is true and one if it's false#}

def _get_plugin_commands():
    {%- for command in commands %}
    {%- if command.input is defined %}
    {{command.implementation_name}}_arguments = [
    {%- for command_input in command.input %}
        AacCommandArgument(
            "{{command_input.name}}",
            {% if command_input.description is defined %}"{{command_input.description}}"{% else %}"TODO: fill me out"{%- endif %},
        ),
    {%- endfor %}
    ]
    {%- endif %}
    {%- endfor %}

    plugin_commands = [
        {%- for command in commands %}
        AacCommand(
            "{{command.name}}",
            "{{command.description}}",
            {{command.implementation_name}}{%- if command.input is defined %},
            {{command.implementation_name}}_arguments,{%- endif %}
        ),
        {%- endfor %}
    ]

    return plugin_commands
{%- endif %}
{%- if plugin_definitions | length > 0 -%}
{# Leave a blank line here since we want 2 space if the expression is true and one if it's false#}
{%- set yaml_file_joiner = joiner("\n---\n") %}

def _get_plugin_definitions():
    plugin_resource_file_args = (__package__, "{{architecture_file.name}}")
    return parse(
        get_resource_file_contents(*plugin_resource_file_args),
        get_resource_file_path(*plugin_resource_file_args),
    )

{%- endif %}
