"""The AaC {{plugin.name}} plugin implementation module."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

from aac.execute.aac_execution_result import ExecutionResult, ExecutionStatus
{% if plugin.context_constraints or plugin.schema_constraints or plugin.primitive_constraints %}from aac.lang.plugininputvalue import PluginInputValue
from aac.execute.aac_execution_result import ExecutionResult
{% endif %}
{% if plugin.context_constraints %}from aac.context.language_context import LanguageContext{% elif plugin.schema_constraints %}from aac.context.definition import Definition
{% endif %}

plugin_name = "{{plugin.name}}"

{% for command in plugin.commands %}{% if command.run_before | length > 0 %}{% for run_before in command.run_before %}
def before_{{get_python_name(command.name)}}_{{get_python_name(run_before.command)}}({% for entry in command.input %}{{ get_python_name(entry.name) }}: {{ get_python_type(entry.type) }}{% if not loop.last %}, {% endif %}{% endfor %}, run_{{get_python_name(run_before.command)}}) -> ExecutionResult:
    """Run the {{run_before.plugin}} {{run_before.name}} command before the {{command.name}} command."""

    # TODO: configure and call the {{run_before.command}} before command using {{command.name}} command inputs
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[str] = ["The {{run_before.plugin}} {{run_before.command}} before handling for the {{command.name}} command has not been implemented yet."]

    return ExecutionResult(plugin_name, "{{command.name}}", status, messages)
{% endfor %}{% endif %}

def {{get_python_name(command.name)}}({% for entry in command.input %}{{ get_python_name(entry.name) }}: {{ get_python_type(entry.type) }}{% if not loop.last %}, {% endif %}{% endfor %}) -> ExecutionResult:
    """Business logic for the {{command.name}} command."""
    
    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[str] = []"The {{command.name}} command for the {{plugin.name}} plugin has not been implemented yet."]

    return ExecutionResult(plugin_name, "{{command.name}}", status, messages)

{% if command.run_after | length > 0 %}{% for run_after in command.run_after %}
def after_{{get_python_name(command.name)}}_{{get_python_name(run_after.command)}}({% for entry in command.input %}{{ get_python_name(entry.name) }}: {{ get_python_type(entry.type) }}{% if not loop.last %}, {% endif %}{% endfor %}, run_{{get_python_name(run_after.command)}}) -> ExecutionResult:
    """Run the {{run_after.plugin}} {{run_after.command}} command after the {{command.name}} command."""

    # TODO: configure and call the {{run_after.command}} after command using {{command.name}} command inputs
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[str] = ["The {{run_after.plugin}} {{run_after.command}} after handling for the {{command.name}} command has not been implemented yet."]

    return ExecutionResult(plugin_name, "{{command.name}}", status, messages)
    {% endfor %}{% endif %}{% endfor %}

{% if plugin.context_constraints | length > 0 %}{% for ctx_constraint in plugin.context_constraints%}
def {{get_python_name(ctx_constraint.name)}}(context: LanguageContext) -> ExecutionResult:
    """ Business logic for the {{ctx_constraint.name}} constraint. """

    # TODO: implement constraint logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[str] = ["The {{ctx_constraint.name}} constraint for the {{plugin.name}} plugin has not been implemented yet."]

    return ExecutionResult(plugin_name, "{{ctx_constraint.name}}", status, messages)
    {% endfor%}{% endif %}

{% if plugin.schema_constraints | length > 0 %}{% for schema_constraint in plugin.schema_constraints%}
def {{get_python_name(schema_constraint.name)}}(definition: Definition, arguments: list[PluginInputValue]) -> ExecutionResult:
    """ Business logic for the {{schema_constraint.name}} constraint. """

    # TODO: implement constraint logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[str] = ["The {{schema_constraint.name}} constraint for the {{plugin.name}} plugin has not been implemented yet."]

    return ExecutionResult(plugin_name, "{{schema_constraint.name}}", status, messages)
    {% endfor%}{% endif %}

{% if plugin.primitive_constraints | length > 0 %}{% for primitive_constraint in plugin.primitive_constraints%}
def {{get_python_name(primitive_constraint.name)}}(value: str, arguments: list[PluginInputValue]) -> ExecutionResult:
    """ Business logic for the {{primitive_constraint.name}} constraint. """

    # TODO: implement constraint logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[str] = ["The {{primitive_constraint.name}} constraint for the {{plugin.name}} plugin has not been implemented yet."]

    return ExecutionResult(plugin_name, "{{primitive_constraint.name}}", status, messages)
    {% endfor%}{% endif %}