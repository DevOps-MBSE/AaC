"""__init__.py module for the {{plugin.name}} plugin."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from os.path import join, dirname
from aac.execute.plugin_runner import AacCommand
{% set comma_joiner = joiner(", ") %}
{% if plugin.commands | length > 0 %}
from aac.execute.aac_execution_result import ExecutionResult, ExecutionStatus
from aac.plugins.{{get_python_name(plugin.name)}}.{{get_python_name(plugin.name)}}_impl import plugin_name, {% for command in plugin.commands %}{{comma_joiner()}}{{get_python_name(command.name)}}{% if command.run_before | length > 0 %}{% for before in command.run_before %}{{  comma_joiner() }}before_{{get_python_name(command.name)}}_{{get_python_name(before.command)}}{% endfor %}{% endif %}{% if command.run_after | length > 0 %}{% for after in command.run_after %}{{  comma_joiner() }}after_{{get_python_name(command.name)}}_{{get_python_name(after.command)}}{% endfor %}{% endif %}{% endfor %}
{% else %}
from aac.plugins.{{get_python_name(plugin.name)}}.{{get_python_name(plugin.name)}}_impl import plugin_name
{% endif %}
from aac.execute import hookimpl
from aac.context.language_context import LanguageContext
from aac.execute.plugin_runner import PluginRunner
{% for command in plugin.commands%}
{% if command.run_before | length > 0 %}{% for run_before in command.run_before %}from {{get_package_from_plugin(run_before.plugin)}} import run_{{get_python_name(run_before.command)}}{% endfor %}{% endif %}
{% if command.run_after | length > 0 %}{% for run_after in command.run_after %}from {{get_package_from_plugin(run_after.plugin)}} import run_{{get_python_name(run_after.command)}}{% endfor %}{% endif %}
{% endfor %}
{{get_python_name(plugin.name)}}_aac_file_name = "{{get_python_name(plugin.name)}}.aac"

{% for command in plugin.commands %}
def run_{{get_python_name(command.name)}}() -> ExecutionResult:
    """{{command.help_text}}"""

    result = ExecutionResult(plugin_name, "{{command.name}}", ExecutionStatus.SUCCESS, [])

    {% if command.run_before | length > 0 %}{% for run_before in command.run_before %}{{get_python_name(command.name)}}_{{get_python_name(run_before.command)}}_result = before_{{get_python_name(command.name)}}_{{get_python_name(run_before.command)}}({% for input in command.input%}{{comma_joiner()}}{{get_python_name(input.name)}}{% endfor %}run_{{get_python_name(run_before.command)}})
    if not {{get_python_name(command.name)}}_{{get_python_name(run_before.command)}}_result.is_success():
        return {{get_python_name(command.name)}}_{{get_python_name(run_before.command)}}_result
    else:
        result.add_messages({{get_python_name(command.name)}}_{{get_python_name(run_before.command)}}_result.messages)
    {% endfor %}{% endif %}
    {{get_python_name(command.name)}}_result = {{get_python_name(command.name)}}()
    if not {{get_python_name(command.name)}}_result.is_success():
        return {{get_python_name(command.name)}}_result
    else:
        result.add_messages({{get_python_name(command.name)}}_result.messages)

    {% if command.run_after | length > 0 %}{% for run_after in command.run_after %}{{get_python_name(command.name)}}_{{get_python_name(run_after.command)}}_result = after_{{get_python_name(command.name)}}_{{get_python_name(run_after.command)}}({% for input in command.input%}{{comma_joiner()}}{{get_python_name(input.name)}}{% endfor %}run_{{get_python_name(run_after.command)}})
    if not {{get_python_name(command.name)}}_{{get_python_name(run_after.command)}}_result.is_success():
        return {{get_python_name(command.name)}}_{{get_python_name(run_after.command)}}_result
    else:
        result.add_messages({{get_python_name(command.name)}}_{{get_python_name(run_after.command)}}_result.messages)
    {% endfor %}{% endif %}
    return result

{% endfor %}
@hookimpl
def register_plugin() -> None:
    """
    Returns information about the plugin.

    Returns:
        A collection of information about the plugin and what it contributes.
    """
    
    active_context = LanguageContext()
    {{get_python_name(plugin.name)}}_aac_file = join(dirname(__file__), {{get_python_name(plugin.name)}}_aac_file_name)
    definitions = active_context.parse_and_load({{get_python_name(plugin.name)}}_aac_file)
    
    {{get_python_name(plugin.name)}}_plugin_definition = [definition for definition in definitions if definition.name == plugin_name][0]

    plugin_instance = {{get_python_name(plugin.name)}}_plugin_definition.instance
    for file_to_load in plugin_instance.definition_sources:
        active_context.parse_and_load(file_to_load)
    
    plugin_runner = PluginRunner(plugin_definition={{get_python_name(plugin.name)}}_plugin_definition)
    {% for command in plugin.commands %}plugin_runner.add_command_callback("{{command.name}}", {{get_python_name(command.name)}}){% endfor %}
    
    active_context.register_plugin_runner(plugin_runner)
