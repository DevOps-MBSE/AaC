"""The AaC If true then empty plugin implementation module."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

# There may be some unused imports depending on the definition of the plugin...but that's ok
from aac.execute.aac_execution_result import (
    ExecutionResult,
    ExecutionStatus,
    ExecutionMessage,
)
from aac.lang.plugininputvalue import PluginInputValue
from aac.context.language_context import LanguageContext
from aac.context.definition import Definition
from aac.lang.schema import Schema
from aac.context.source_location import SourceLocation
from typing import Any


plugin_name = "If true then empty"


def if_true_then_empty(
    instance: Any,
    definition: Definition,
    defining_schema: Schema,
    arguments: list[PluginInputValue],
) -> ExecutionResult:
    """Business logic for the If true then empty constraint."""

    # get the boolean field and empty field from instance
    bool_field_name = None
    empty_field_name = None
    
    for argument in arguments:
        if argument.name == "bool_field_name":
            bool_field_name = argument.value
        elif argument.name == "empty_field_name":
            empty_field_name = argument.value

    # get the boolean field and empty field from instance
    if not bool_field_name or not empty_field_name:
        error_msg = ExecutionMessage(
            f"The If true then empty constraint for {instance.name} requires a bool_field_name and empty_field_name argument.",
            definition.source,
            None,
        )
        return ExecutionResult(plugin_name, "If true then empty", ExecutionStatus.GENERAL_FAILURE, [error_msg])
    bool_field_value = getattr(instance, bool_field_name, None)
    empty_field_value = getattr(instance, empty_field_name, None)

    is_empty_field_empty =  (empty_field_value is None or empty_field_value == "" or empty_field_value == [] or empty_field_value == {})

    if bool_field_value and not is_empty_field_empty:
        # the constraint failed
        error_msg = ExecutionMessage(
            f"The If true then empty constraint for {instance.name} failed because {bool_field_name} is true and {empty_field_name} is not empty.",
            definition.source,
            None,
        )
        return ExecutionResult(plugin_name, "If true then empty", ExecutionStatus.GENERAL_FAILURE, [error_msg])

    # the constraint passed
    return ExecutionResult(plugin_name, "If true then empty", ExecutionStatus.SUCCESS, [])
