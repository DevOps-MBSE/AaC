"""AaC Plugin implementation module for the reporting plugin."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by the aac gen-plugin, and it won't be overwritten if the file already exists.

from aac.plugins.plugin_execution import PluginExecutionResult, plugin_result
import yaml

plugin_name = "reporting"


def report(architecture_file: str, output_file: str) -> PluginExecutionResult:
    """
    Generate YAML output from an Arch-as-Code report definition.

    Args:
        architecture_file (str): The yaml file containing the report model.
        output_file (str): The file to write the generated YAML report.
    """
    def _gen_yaml_report():
        yaml_content = yaml.dump(_generate_report(architecture_file), default_flow_style=False)
        return yaml_content

    with plugin_result(plugin_name, _gen_yaml_report) as result:
        return result


def report_csv(architecture_file: str, output_file: str) -> PluginExecutionResult:
    """
    Generate CSV output from an Arch-as-Code report definition.

    Args:
        architecture_file (str): The yaml file containing the report model.
        output_file (str): The file to write the generated CSV report.
    """
    def _gen_csv_report():
        return _to_csv(_generate_report(architecture_file))

    with plugin_result(plugin_name, _gen_csv_report) as result:
        return result

def _generate_report(architecture_file: str) -> dict:
    print(f"_generate_report processing {architecture_file}")
    return {"title": "Dummy Report", "content": [{"name": "Heading_1", "value": "Value_1"}, {"name": "Heading_2", "value": "Value_2"}]}

def _to_csv(report_content: dict) -> str:
    return "heading_1, heading_2 \n value_1, value_2 \n"
