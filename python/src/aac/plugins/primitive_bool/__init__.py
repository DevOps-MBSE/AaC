"""__init__.py module for the Check boolean primitive plugin."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from os.path import join, dirname
from aac.execute.plugin_runner import AacCommand


from aac.plugins.primitive_bool.check_boolean_primitive_impl import plugin_name

from aac.lang.plugininputvalue import PluginInputValue
from aac.execute.aac_execution_result import ExecutionResult


from aac.plugins.primitive_bool.check_boolean_primitive_impl import check_bool

from aac.execute import hookimpl
from aac.context.language_context import LanguageContext
from aac.execute.plugin_runner import PluginRunner

check_boolean_primitive_aac_file_name = "check_boolean_primitive.aac"


def run_check_bool(value: str, arguments: list[PluginInputValue]) -> ExecutionResult:
    """Verify that a boolen value is True or False."""

    return check_bool(value, arguments)


@hookimpl
def register_plugin() -> None:
    """
    Returns information about the plugin.

    Returns:
        A collection of information about the plugin and what it contributes.
    """

    active_context = LanguageContext()
    check_boolean_primitive_aac_file = join(
        dirname(__file__), check_boolean_primitive_aac_file_name
    )
    definitions = active_context.parse_and_load(check_boolean_primitive_aac_file)

    check_boolean_primitive_plugin_definition = [
        definition for definition in definitions if definition.name == plugin_name
    ][0]

    plugin_instance = check_boolean_primitive_plugin_definition.instance
    for file_to_load in plugin_instance.definition_sources:
        active_context.parse_and_load(file_to_load)

    plugin_runner = PluginRunner(
        plugin_definition=check_boolean_primitive_plugin_definition
    )

    plugin_runner.add_constraint_callback("Check bool", run_check_bool)

    active_context.register_plugin_runner(plugin_runner)
