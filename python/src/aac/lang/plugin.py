"""Python module for the Plugin class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators
from aac.lang.plugincommand import PluginCommand


@dataclass(frozen=True)
class Plugin:
    """
    A definition for an AaC plugin. Plugins can provide any extra functionality desired on top of AaC-modeled systems from document generation to code generation and everything in between.

    name: str -
    package: str -
    description: Optional[str] -
    commands: list[PluginCommand]] -
    definition_sources: list[str] -
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    package: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    commands: list[PluginCommand] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[PluginCommand])
    )
    definition_sources: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        commands_data = data.pop("commands", [])
        commands = [PluginCommand.from_dict(entry) for entry in commands_data]
        args["commands"] = commands

        definition_sources = data.pop("definition_sources", [])
        args["definition_sources"] = definition_sources

        return cls(**args, **data)
