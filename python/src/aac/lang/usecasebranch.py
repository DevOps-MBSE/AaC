"""Python module for the UsecaseBranch class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators


@dataclass(frozen=True)
class UsecaseBranch:
    """
    Autogenerated UsecaseBranch AaC schema

    condition: str - A condition to test whether a sequence of steps should be performed.
    steps: list[str] - A list of steps to perform if the condition for the branch is "true".
    """

    condition: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    steps: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        steps = data.pop("steps", [])
        args["steps"] = steps

        return cls(**args, **data)
