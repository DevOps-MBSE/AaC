"""Python module for the UsecaseActor class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators


@dataclass(frozen=True)
class UsecaseActor:
    """
    Actors represent roles played by external human uisers, hardware, and other subjects. Actors may be linked to a model by populating the optional model field.  If not associated with a model, the actor is considered external to the system.

    name: str - The name of the actor.
    description: Optional[str] - An explanatory description of the actor, including what the actor is, why it exists, etc.
    tags: list[str] - Tags associated with the actor. These could be used to group similar actors into categories like "front-end", "back-end", etc.
    model: Optional[str] - A model that participates in the use case.
    requirements: list[str] - A list of allocated requirements defining the expected behavior to be provided.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    tags: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    model: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    requirements: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        tags = data.pop("tags", [])
        args["tags"] = tags

        model = data.pop("model", None)
        args["model"] = model

        requirements = data.pop("requirements", [])
        args["requirements"] = requirements

        return cls(**args, **data)
