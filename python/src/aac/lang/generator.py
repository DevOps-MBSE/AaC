"""Python module for the Generator class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators

from aac.lang.generatorsource import GeneratorSource


@dataclass(frozen=True)
class Generator:
    """
    A generator associates a model with a Jinja2 template for content genreation. Generators can be run using the AaC built-in generate command.

    name: str - The name of the generator.
    description: Optional[str] - A description of the generator.
    sources: list[GeneratorSource]] - The list of templates to use when generating content.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    sources: list[GeneratorSource] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[GeneratorSource])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        sources_data = data.pop("sources", [])
        sources = [GeneratorSource.from_dict(entry) for entry in sources_data]
        args["sources"] = sources

        return cls(**args, **data)
