"""Python module for the PluginCommandInput class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators


@dataclass(frozen=True)
class PluginCommandInput:
    """
    A plugin command reference that can be used to establish cross-plugin behaviors.

    name: str - The name of the plugin input parameter.  Prefix the name with "--" to indicate an optional input.
    description: Optional[str] - A brief description of the input. This will be used in CLI help.
    type: str - The command inputs are translaed to python function inputs.  This is the python type to use.
    default: Optional[str] - The default value to provide to a plugin, if desired.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    type: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    default: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        default = data.pop("default", None)
        args["default"] = default

        return cls(**args, **data)
