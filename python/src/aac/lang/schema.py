"""Python module for the Schema class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators
from aac.lang.aactype import AacType
from aac.lang.schemaextension import SchemaExtension
from aac.lang.field import Field


@dataclass(frozen=True)
class Schema(AacType):
    """
    A definition that defines the schema/structure of data.

    extends: list[SchemaExtension]] - A list of Schema definition names that this definition inherits from.
    modifiers: list[str] - A means of further defining the schema and how it can be used within the model.
    root: Optional[str] - The root key to use when declaring an instance of the type in yaml/aac files.
    fields: list[Field]] - A list of fields that make up the definition.
    """

    extends: list[SchemaExtension] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[SchemaExtension])
    )
    modifiers: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    root: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    fields: list[Field] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[Field])
    )

    @classmethod
    def from_dict(cls, data):
        extends_data = data.pop("extends", [])
        extends = [SchemaExtension.from_dict(entry) for entry in extends_data]
        modifiers = data.pop("modifiers", [])
        root = data.pop("root", None)
        fields_data = data.pop("fields", [])
        fields = [Field.from_dict(entry) for entry in fields_data]

        return cls(
            extends=extends, modifiers=modifiers, root=root, fields=fields, **data
        )
