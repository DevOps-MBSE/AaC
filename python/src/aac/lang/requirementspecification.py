"""Python module for the RequirementSpecification class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators


@dataclass(frozen=True)
class RequirementSpecification:
    """
    A requirement specification definition to capture desired behavior or attributes of the system being modeled.  Within many contexts requirements remain the central element of any Model-Based System Engineering solution. AaC supports the definition, derivation, and trace of requirements throughout the model using the spec type and associated reference capabilities.

    name: str - The name of the requirement specification.
    description: Optional[str] - A brief description of the requirement specification.
    sections: list[str] - A list of requirement sections that make up the specification.
    parent_specs: list[str] - A list of requirement specifications that this specification inherits from.
    child_specs: list[str] - A list of requirement specifications that inherit from this specification.
    requirements: list[str] - A list of requirements that make up the specification.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    sections: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    parent_specs: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    child_specs: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    requirements: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        sections = data.pop("sections", [])
        args["sections"] = sections

        parent_specs = data.pop("parent_specs", [])
        args["parent_specs"] = parent_specs

        child_specs = data.pop("child_specs", [])
        args["child_specs"] = child_specs

        requirements = data.pop("requirements", [])
        args["requirements"] = requirements

        return cls(**args, **data)
