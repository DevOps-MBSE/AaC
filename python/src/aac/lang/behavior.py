"""Python module for the Behavior class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators

from aac.lang.field import Field
from aac.lang.field import Field
from aac.lang.feature import Feature


@dataclass(frozen=True)
class Behavior:
    """
    Autogenerated Behavior AaC schema

    name: str - The name of the behavior.
    description: Optional[str] - An explanatory description of the behavior, including what the behavior is, why it exists, etc.
    tags: list[str] - Tags associated with the behavior. These could be used to group similar behaviors into categories like "timing", "network", etc.
    input: list[Field]] - The list of all the fields that are inputs to the component when the behavior is performed.
    output: list[Field]] - The list of all the fields that are outputs to the component when the behavior is performed.
    acceptance: list[Feature]] - A list of test specifications that define the acceptance criteria to signify that the system is behaving as expected.
    requirements: list[str] - A list of allocated requirements defining the expected behavior to be provided.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    tags: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    input: list[Field] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[Field])
    )
    output: list[Field] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[Field])
    )
    acceptance: list[Feature] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[Feature])
    )
    requirements: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        tags = data.pop("tags", [])
        args["tags"] = tags

        input_data = data.pop("input", [])
        input = [Field.from_dict(entry) for entry in input_data]
        args["input"] = input

        output_data = data.pop("output", [])
        output = [Field.from_dict(entry) for entry in output_data]
        args["output"] = output

        acceptance_data = data.pop("acceptance", [])
        acceptance = [Feature.from_dict(entry) for entry in acceptance_data]
        args["acceptance"] = acceptance

        requirements = data.pop("requirements", [])
        args["requirements"] = requirements

        return cls(**args, **data)
