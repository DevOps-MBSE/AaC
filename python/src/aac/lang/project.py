"""Python module for the Project class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators

from aac.lang.projectdependency import ProjectDependency


@dataclass(frozen=True)
class Project:
    """
    A definition for an AaC project. Projects provide an environment to define plugins your team can use to  extend AaC to meet your unique needs.

    name: str - The name of your project.
    description: Optional[str] - A brief descritpion of your project.  This will initialize your project read me file.
    uses: list[ProjectDependency]] - A list of pypi dependencies to include in the project.  This can be particularly useful if you're leveraging other AaC plugins in your project.  You will get the AaC core project by default, so no need to include it here.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    uses: list[ProjectDependency] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[ProjectDependency])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        uses_data = data.pop("uses", [])
        uses = [ProjectDependency.from_dict(entry) for entry in uses_data]
        args["uses"] = uses

        return cls(**args, **data)
