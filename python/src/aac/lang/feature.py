"""Python module for the Feature class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators

from aac.lang.background import Background
from aac.lang.scenario import Scenario


@dataclass(frozen=True)
class Feature:
    """
    A test specification for a defined feature as described in the Gherkin syntax.

    name: str - The name of the feature to be tested
    background: Optional[Background] - A common set of setup steps for all scenarios
    scenarios: list[Scenario]] - A set of test cases
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    background: Optional[Background] = attrib(
        init=attr.ib(),
        validator=validators.optional(validators.instance_of(Background)),
    )
    scenarios: list[Scenario] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[Scenario])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        background_data = data.pop("background", None)
        background = Background.from_dict(background_data) if background_data else None
        args["background"] = background

        scenarios_data = data.pop("scenarios", [])
        scenarios = [Scenario.from_dict(entry) for entry in scenarios_data]
        args["scenarios"] = scenarios

        return cls(**args, **data)
