"""Python module for the Field class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators


@dataclass(frozen=True)
class Field:
    """
    Autogenerated Field AaC schema

    name: str - The name of the field.  Used to refer to the field, in certain cases.
    type: str - The type of the field.  Used to constrain the field's values to make it simpler to reason about. Must reference an existing definition by name.
    description: Optional[str] - A description for the field to let users know what it's for and any other useful information.
    is_required: Optional[bool] - Indicates that the field must be present when used.
    default: Optional[str] - The default value to use for the field if field is not provided.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    type: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    is_required: Optional[bool] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(bool))
    )
    default: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        is_required = data.pop("is_required", None)
        args["is_required"] = is_required

        default = data.pop("default", None)
        args["default"] = default

        return cls(**args, **data)
