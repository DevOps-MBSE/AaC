"""Python module for the PrimitiveConstraintAssignment class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators


@dataclass(frozen=True)
class PrimitiveConstraintAssignment:
    """
    Assigns a primitive constraint to a primitive definition.

    name: str - The name of the schema constraint definition.
    arguments: Optional[Any] - Arguments for the primitive constraint if applicable.  Using the any type because the arguments are defined by the constraint definition.  The  constraint_assignment_arguments constraint will cross reference arguments provided here against the constraint definition.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    arguments: Optional[Any] = attrib(init=attr.ib())

    @classmethod
    def from_dict(cls, data):
        args = {}

        arguments = data.pop("arguments", None)
        args["arguments"] = arguments

        return cls(**args, **data)
