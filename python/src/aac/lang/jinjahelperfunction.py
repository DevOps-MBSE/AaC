"""Python module for the JinjaHelperFunction class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators


@dataclass(frozen=True)
class JinjaHelperFunction:
    """
    A helper function to be made available to a Jinja2 template.  Helper functions are defined as python functions and are made available to the template as a python module.

    name: str - The name of the helper function.
    description: Optional[str] - A short description of the helper function.
    package: str - The python package to be made available to the template.
    module: str - The python module name containing the function to be made available to the template.
    function: str - The python function to be made available to the template.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    package: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    module: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    function: str = attrib(init=attr.ib(), validator=validators.instance_of(str))

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        return cls(**args, **data)
