"""Python module for the Requirement class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators

from aac.lang.requirementverificationmethod import RequirementVerificationMethod
from aac.lang.requirementattribute import RequirementAttribute


@dataclass(frozen=True)
class Requirement:
    """
    Autogenerated Requirement AaC schema

    name: str - The name or title of the requirement.
    id: str - The unique identifier for the requirement.
    shall: str - The requirement statement.  If needed, you may reference a requirement parameter by name using the following syntax: {param_name}.
    parents: list[str] - A list of requirements that this requirement is decomposed from.
    children: list[str] - A list of requirements that are decomposed from this requirement.
    parameters: list[str] - A list of parameters that provide additional information about the requirement.
    verification_method: Optional[RequirementVerificationMethod] - The method used to verify the requirement.
    attributes: list[RequirementAttribute]] - A list of attributes that provide additional information about the requirement.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    id: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    shall: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    parents: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    children: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    parameters: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    verification_method: Optional[RequirementVerificationMethod] = attrib(
        init=attr.ib(),
        validator=validators.optional(
            validators.instance_of(RequirementVerificationMethod)
        ),
    )
    attributes: list[RequirementAttribute] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[RequirementAttribute])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        parents = data.pop("parents", [])
        args["parents"] = parents

        children = data.pop("children", [])
        args["children"] = children

        parameters = data.pop("parameters", [])
        args["parameters"] = parameters

        verification_method_data = data.pop("verification_method", None)
        verification_method = (
            RequirementVerificationMethod.from_dict(verification_method_data)
            if verification_method_data
            else None
        )
        args["verification_method"] = verification_method

        attributes_data = data.pop("attributes", [])
        attributes = [
            RequirementAttribute.from_dict(entry) for entry in attributes_data
        ]
        args["attributes"] = attributes

        return cls(**args, **data)
