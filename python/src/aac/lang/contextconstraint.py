"""Python module for the ContextConstraint class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators

from aac.lang.feature import Feature


@dataclass(frozen=True)
class ContextConstraint:
    """
    The definition of a global context constraint plugin.  Context constraints perform checks against a complete model rather than a specific schema or primitive. Defining a context constraint allows for automted global quality checks by running the 'aac check' command against your model.

    name: str - The name of the context constraint rule.
    description: Optional[str] - A high level description of the context constraint rule.
    acceptance: list[Feature]] - A list of acceptance test features that describe the expected behavior of the context constraint.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    acceptance: list[Feature] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[Feature])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        acceptance_data = data.pop("acceptance", [])
        acceptance = [Feature.from_dict(entry) for entry in acceptance_data]
        args["acceptance"] = acceptance

        return cls(**args, **data)
