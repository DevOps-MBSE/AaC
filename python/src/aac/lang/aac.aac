# The Architecture-as-Code (AaC) core language definition.
#   AaC is a self-defining language.  Each section below
#   contains the building blocks to define MBSE products, 
#   or tailor the AaC Model-Based System Engineering
#   functionality to suit your needs.
---
# Fountational language definitions upon with all other language constructs are based
---
schema:
  name: AacType
  package: aac.lang
  modifier: Abstract
  description: |
    The base type for any data item defined in AaC.
  fields:
    - name: name
      type: string
      description: |
        The name of the type.
      is_required: true
    - name: description
      type: string
      dexcription: |
        A brief description of the type.
---
schema:
  name: Modifier
  package: aac.lang
  root: modifier
  fields:
    - name: name
      type: string
      description: |
        The name of the modifier.
      is_required: true
    - name: description
      type: string
      description: |
        A description of the modifier.
    - name: fields
      type: Field[]
      description: |
        Optional fields to provide supporting information for the modifier.
---
modifier:
  name: abstract
  description: |
    Denotes that the schema is abstract and cannot be referenced unless in the 
    'extends' field of another schema wishing to inherit from this schema.
---
modifier:
  name: final
  description: |
    Denotes that the schema is final and cannot be referenced by another
    schema's 'extends' field for inheritance.
---
schema:
  name: Enum
  extemds: AacType
  root: enum
  gen_plugin_template_file: templates/enum.jinja2
  description: |
    A definition that represents an enumerated type of value.
    
    An example of when to use an 'enum' is when you want to provide several
    different options for a single value.
  fields:
    - name: extends
      type: reference(enum.name)[]
      description: |
        A list of Enum definition names that this definition inherits from.
    - name: values
      type: string[]
      description: |
        A list of strings that encompass the enumeration's possible values.  
---
schema:
  name: Primitive
  package: aac.lang
  extends: AacType
  root: primitive
  description: |
    A definition that represents a primitive value for use in the model.
  fields:
    - name: python_type
      type: string
      description:  The type value to represend this primitive with while generating python code.
---
primitive:
  name: string
  description:  |
    A textual value.
  python_value: str
---
primitive:
  name: int
  python_value: int
---
primitive:
  name: number
  python_type: float
---
primitive:
  name: bool
  python_type: bool
  description:  |
    A boolean value.
---
primitive:
  name: date
  python_type: str
  description:  |
    A date or date-time value.
---
primitive:
  name: file
  python_type: str
  description:  |
    A computer file path value.
---
primitive:
  name: directory
  python_type: str
  description:  |
    A computer directory path value.
---
primitive:
  name: reference
  python_type: Any
  description:  |
    A reference to another defined item.  References are typed and documented 
    as 'reference(schema_name.field_name)' denoting the definition and field being referenced.
    The schema_name may be 'this' if referring to a field within the same definition.
---
schema:
  name: Schema
  extends: AacType
  package: aac.lang
  root: schema
  gen_plugin_template_file: templates/schema.jinja2
  description: |
    A definition that defines the schema/structure of data.
    
    A 'schema' definition can alternatively be thought as a defining the
    data structure of a definition.
  fields:
    - name: extends
      type: reference(schema.name)[]
      description: |
        A list of Schema definition names that this definition inherits from.
    - name: modifiers
      type: reference(modifier.name)[]
      description:
        A means of further defining the schema and how it can be used within the model.
    - name: package
      type: string
      description: |
        The 'dot notation' package name for the schema.  All schema names must be unique within an assigned type.
        The package will also define the directory structure produced by gen-plugin.
      is_required: true
    - name: root
      type: str
      description: |
        The root key to use when declaring an instance of the type in yaml/aac files.
    - name: gen_plugin_template_file
      type: file
      description: |
        The file containing the jinja2 template used to generate items of the defined type.
    - name: fields
      type: Field[]
      description: |
        A list of fields that make up the definition.
      is_required: true
---
schema:
  name: Field
  package: aac.lang
  fields:
    - name: name
      type: string
      description: |
        The name of the field.

        Used to refer to the field, in certain cases.
      is_required: true
    - name: type
      type: reference(schema.name)
      description: |
        The type of the field.

        Used to constrain the field's values to make it simpler to reason about. Must
        reference an existing definition by name.
      is_required: true
    - name: description
      type: string
      description: |
        A description for the field to let users know what it's for and any
        other useful information.
    - name: is_required
      type: bool
      description: |
        Indicates that the field must be present when used.
    - name: default
      type: any
      description: |
        The default value to use for the field if field is not provided.
---
schema:
  name: Import
  package: aac.lang
  root: import
  description: |
    A definition that represents the list of imported files containing
    externally-defined definitions that are referenced in the current file.
  fields:
    - name: files
      type: file[]
      description: |
        The list of AaC files to import for use in the architecture.
      is_required: true
---
# Language Plugin Definition Types
---
schema:
  name: Plugin
  package: aac.lang
  root: plugin
  description: |
    A reference to a plugin. Plugins can provide any extra functionality
    desired on top of AaC-modeled systems from document generation to code
    generation and everything in between.
    
    Plugins are referenced by name.
  fields:
    - name: name
      type: string
    - name: description
      type: description
    - name: commands
      type: PluginCommand[]
    - name: definition_sources
      type: file[]
---
schema:
  name: PluginCommand
  package: aac.lang
  fields:
    - name: name
      type: string
      description: The name of the command.  This will be used by the CLI to invke the command.
    - name: helpText
      type: string
      description: |
        A description that will be displayed as help text when displaying
        command usage.
    - name: run_before
      type: string[]
      description: |
        A listing of plugin commands to run before this command.
    - name: run_after
      type: string[]
      description: |
        A listing of plugin commands to run before this command.
    - name: input
      type: PluginCommandInput[]
      description: |
        The list of all the fields that are inputs to the component when the
        command is executed.
---
schema:
  name: PluginCommandInput
  package: aac.lang
  description: |
    A plugin command reference that can be used to establish cross-plugin behaviors.
  fields:
    - name: name
      type: string
      description: |
        The name of the plugin input parameter.  Prefix the name with "--" to indicate an optional input.
      is_required: true
    - name: description
      type: string
      description: |
        A brief description of the input. This will be used in CLI help.
    - name: type
      type: reference(primitive.name)
      description: |
        The command inputs are translaed to python function inputs.  This is the python type to use.
      is_required: true
    - name: default
      type:  string
      descripiton: |
        The default value to provide to a plugin, if desired.
