"""Python module for the ModelComponent class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators

from aac.lang.cardinallity import Cardinallity


@dataclass(frozen=True)
class ModelComponent:
    """
    A component of a model, which may be reasonably described as a sub-model.

    name: str - The name of the component.
    description: Optional[str] - An explanatory description for the component including what the component is modeling and any other relevant information.
    cardinallity: Optional[Cardinallity] - The cardinality of the component within the model.
    model: str - The name of the model declaration for the component.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    description: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    cardinallity: Optional[Cardinallity] = attrib(
        init=attr.ib(),
        validator=validators.optional(validators.instance_of(Cardinallity)),
    )
    model: str = attrib(init=attr.ib(), validator=validators.instance_of(str))

    @classmethod
    def from_dict(cls, data):
        args = {}

        description = data.pop("description", None)
        args["description"] = description

        cardinallity_data = data.pop("cardinallity", None)
        cardinallity = (
            Cardinallity.from_dict(cardinallity_data) if cardinallity_data else None
        )
        args["cardinallity"] = cardinallity

        return cls(**args, **data)
