"""Python module for the Primitive class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators

from aac.lang.aactype import AacType


from aac.lang.primitiveconstraintassignment import PrimitiveConstraintAssignment


@dataclass(frozen=True)
class Primitive(AacType):
    """
    A definition that represents a primitive value for use in the model.

    python_type: str - The type value to represend this primitive with while generating python code.
    constraints: list[PrimitiveConstraintAssignment]] - A list of constraints to apply to the primitive.
    """

    python_type: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    constraints: list[PrimitiveConstraintAssignment] = attrib(
        init=attr.ib(),
        validator=validators.instance_of(list[PrimitiveConstraintAssignment]),
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        constraints_data = data.pop("constraints", [])
        constraints = [
            PrimitiveConstraintAssignment.from_dict(entry) for entry in constraints_data
        ]
        args["constraints"] = constraints

        return cls(**args, **data)
