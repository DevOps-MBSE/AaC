"""Python module for the Scenario class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional, Any
from attr import attrib, validators

from aac.lang.example import Example


@dataclass(frozen=True)
class Scenario:
    """
    An acceptance test definition using the given, when, then pattern described in the Gherkin syntax.

    name: str - The name of the scenario.
    tags: list[str] - Tags associated with the scenario. These could be used to group similar scenarios into categories like "front-end", "back-end", etc.
    given: list[str] - A list of preconditions that must be true in order for the scenario to perform the expected action or provide the expected result.
    when: list[str] - A list of triggers that indicate some reason for the system to act in a certain way or provide some result.
    then: list[str] - A list of post conditions that will be true once the system has completed its action based on the triggers.
    examples: Optional[Example] - An list of data sets for use in the test scenario.  When using examples, include a replaceable item in your given, when, then using angle brackets as described in the Gherkin syntax (ex: <my_text_value).  Each example provided contains the collection of named values that will be substituted in for test execution.
    """

    name: str = attrib(init=attr.ib(), validator=validators.instance_of(str))
    tags: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    given: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    when: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    then: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )
    examples: Optional[Example] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(Example))
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        tags = data.pop("tags", [])
        args["tags"] = tags

        given = data.pop("given", [])
        args["given"] = given

        when = data.pop("when", [])
        args["when"] = when

        then = data.pop("then", [])
        args["then"] = then

        examples_data = data.pop("examples", None)
        examples = Example.from_dict(examples_data) if examples_data else None
        args["examples"] = examples

        return cls(**args, **data)
