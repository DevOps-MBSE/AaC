"""Python module for the Background class."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from dataclasses import dataclass
import attr
from typing import Optional
from attr import attrib, validators


@dataclass(frozen=True)
class Background:
    """
    A common set of given steps to be performed for all scenarios defined in a feature as described in the Gherkin syntax.

    name: Optional[str] - The name of the background activities.
    given: list[str] - A list of preconditions that must be true in order for the scenario to perform the expected action or provide the expected result.
    """

    name: Optional[str] = attrib(
        init=attr.ib(), validator=validators.optional(validators.instance_of(str))
    )
    given: list[str] = attrib(
        init=attr.ib(), validator=validators.instance_of(list[str])
    )

    @classmethod
    def from_dict(cls, data):
        args = {}

        name = data.pop("name", None)
        args["name"] = name

        given = data.pop("given", [])
        args["given"] = given

        return cls(**args, **data)
