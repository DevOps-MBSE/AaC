"""The {{plugin.name}} plugin module."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

from aac.plugins import hookimpl
from aac.AacCommand import AacCommand, AacCommandArgument
from aac.package_resources import get_resource_file_contents
{%- set comma_joiner = joiner(", ") %}
{%- if commands | length > 0 %}
from aac.plugins.{{architecture_file.parent_directory_name}}.{{plugin.implementation_name}}_impl import {% for command in commands -%}{{comma_joiner()}}{{command.implementation_name}}{%- endfor %}
{%- endif %}


@hookimpl
def get_commands() -> list[AacCommand]:
    """
    Return a list of AacCommands provided by the plugin to register for use.

    This function is automatically generated. Do not edit.

    Returns:
        list of AacCommands
    """
    {%- for command in commands %}
    {%- if command.input is defined %}
    {{command.implementation_name}}_arguments = [
    {%- for command_input in command.input %}
        AacCommandArgument("{{command_input.name}}",{%- if command_input.description is defined %} "{{command_input.description}}"{% else %}"TODO: fill me out"{%- endif %}),
    {%- endfor %}
    ]
    {%- endif %}
    {%- endfor %}

    plugin_commands = [
        {%- for command in commands %}
        AacCommand(
            "{{command.name}}",
            "{{command.description}}",
            {{command.implementation_name}}{%- if command.input is defined %},
            {{command.implementation_name}}_arguments{%- endif %}
        ),
        {%- endfor %}
    ]

    return plugin_commands
{%- if plugin_definitions | length > 0 -%}
{# Leave a blank line here since we want 2 space if the expression is true and one if it's false#}
{%- set yaml_file_joiner = joiner("\n---\n") %}


@hookimpl
def get_plugin_aac_definitions() -> str:
    """
    Returns the CommandBehaviorType modeling language extension to the plugin infrastructure.

    Returns:
        string representing yaml extensions and data definitions employed by the plugin
    """
    return get_resource_file_contents(__package__, "{{architecture_file.name}}")

{%- endif %}
