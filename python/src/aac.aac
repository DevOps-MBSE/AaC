# The Architecture-as-Code (AaC) core language definition.
#   AaC is a self-defining language.  Each section below
#   contains the building blocks to define MBSE products, 
#   or tailor the AaC Model-Based System Engineering
#   functionality to suit your needs.
---
# Fountational language definitions upon with all other language constructs are based
---
schema:
  name: AacType
  package: aac.lang
  modifiers: 
    - name: abstract
  description: |
    The base type for any data item defined in AaC.
  fields:
    - name: name
      type: string
      description: |
        The name of the type.
      is_required: true
    - name: package
      type: string
      description: |
        The 'dot notation' package name for the type.  All type names must be unique within an assigned type.
        The package will also define the directory structure produced by gen-plugin.
      is_required: true
    - name: description
      type: string
      description: |
        A brief description of the type.
---
schema:
  name: Modifier
  package: aac.lang
  root: modifier
  fields:
    - name: name
      type: string
      description: |
        The name of the modifier.
      is_required: true
    - name: description
      type: string
      description: |
        A description of the modifier.
    - name: fields
      type: Field[]
      description: |
        Optional fields to provide supporting information for the modifier.
---
modifier:
  name: abstract
  description: |
    Denotes that the schema is abstract and cannot be referenced unless in the 
    'extends' field of another schema wishing to inherit from this schema.
---
modifier:
  name: final
  description: |
    Denotes that the schema is final and cannot be referenced by another
    schema's 'extends' field for inheritance.
---
# We have to be careful not to use any python reserved words as schema or field names.
# It's a little clunky, but we use the AacEnum name instead of the enum keyword.
# And we use enumerated_values instead of values.
# Also, when trying to generate python code for an aacenum enum extension, I discovered
# that python doesn't seem to like extensions of an enum.  So I've made it such that only
# schemas can be extended.  If you need an enum with the same enumerated_values as another
# enum, just create a new one with the values you need.
schema:
  name: AacEnum
  package: aac.lang
  extends: 
    - package: aac.lang
      name: AacType
  root: aacenum
  description: |
    A definition that represents an enumerated type of value.
    
    An example of when to use an 'enum' is when you want to provide several
    different options for a single value.
  fields:
    - name: enumerated_values
      type: string[]
      description: |
        A list of strings that encompass the enumeration's possible values.
---
schema:
  name: Primitive
  package: aac.lang
  extends: 
    - package: aac.lang
      name: AacType
  root: primitive
  description: |
    A definition that represents a primitive value for use in the model.
  fields:
    - name: python_type
      type: string
      description:  The type value to represend this primitive with while generating python code.
    - name: constraints
      type: PrimitiveConstraintAssignment[]
      description: |
        A list of constraints to apply to the primitive.
---
primitive:
  name: string
  package: aac.lang
  description:  |
    A textual value.
  python_type: str
---
primitive:
  name: int
  package: aac.lang
  python_type: int
---
primitive:
  name: number
  package: aac.lang
  python_type: float
---
primitive:
  name: bool
  package: aac.lang
  python_type: bool
  description:  |
    A boolean value.
---
primitive:
  name: date
  package: aac.lang
  python_type: str
  description:  |
    A date or date-time value.
---
primitive:
  name: file
  package: aac.lang
  python_type: str
  description:  |
    A computer file path value.
---
primitive:
  name: directory
  package: aac.lang
  python_type: str
  description:  |
    A computer directory path value.
---
primitive:
  name: reference
  package: aac.lang
  python_type: str
  description:  |
    A reference to another defined item.  References are typed and documented 
    as 'reference(schema_root.field_name)' denoting the definition and field being referenced.
---
schema:
  name: Schema
  extends: 
    - package: aac.lang
      name: AacType
  package: aac.lang
  root: schema
  description: |
    A definition that defines the schema/structure of data.
  fields:
    - name: extends
      type: SchemaExtension[]
      description: |
        A list of Schema definition names that this definition inherits from.
    - name: modifiers
      type: reference(modifier.name)[]
      description:
        A means of further defining the schema and how it can be used within the model.
    - name: root
      type: string
      description: |
        The root key to use when declaring an instance of the type in yaml/aac files.
    - name: fields
      type: Field[]
      description: |
        A list of fields that make up the definition.
      is_required: true
    - name: requirements
      type: reference(req.id)[]
      description: |
        A list of requirements associated with this schema.
    - name: constraints
      type: SchemaConstraintAssignment[]
---
schema:
  name: SchemaExtension
  package: aac.lang
  description: |
    References the inheritance parent schema.
  fields:
    - name: package
      type: reference(schema.package)
      description: |
        The package name of the inheritance parent schema.
      is_required: true
    - name: name
      type: reference(schema.name)
      description: |
        The name of the inheritance parent schema.
      is_required: true
---
schema:
  name: Field
  package: aac.lang
  fields:
    - name: name
      type: string
      description: |
        The name of the field.

        Used to refer to the field, in certain cases.
      is_required: true
    - name: type
      type: reference(schema.name)
      description: |
        The type of the field.

        Used to constrain the field's values to make it simpler to reason about. Must
        reference an existing definition by name.
      is_required: true
    - name: description
      type: string
      description: |
        A description for the field to let users know what it's for and any
        other useful information.
    - name: is_required
      type: bool
      description: |
        Indicates that the field must be present when used.
      default: false
    - name: default
      type: string
      description: |
        The default value to use for the field if field is not provided.
---
schema:
  name: AacImport
  package: aac.lang
  root: import
  description: |
    A definition that represents the list of imported files containing
    externally-defined definitions that are referenced in the current file.
  fields:
    - name: files
      type: file[]
      description: |
        The list of AaC files to import for use in the architecture.
      is_required: true
---
# Language Plugin Definition Types
---
schema:
  name: Project
  package: aac.lang
  root: project
  description: |
    A definition for an AaC project. Projects provide an environment to define
    plugins your team can use to  extend AaC to meet your unique needs.
  fields:
    - name: name
      type: string
      description: |
        The name of your project.
    - name: description
      type: string
      description: |
        A brief descritpion of your project.  This will initialize your project read me file.
    - name: uses
      type: ProjectDependency[]
      description: |
        A list of pypi dependencies to include in the project.  This can be particularly
        useful if you're leveraging other AaC plugins in your project.  You will get the AaC
        core project by default, so no need to include it here.
---
schema:
  name: ProjectDependency
  package: aac.lang
  description: |
    A pypi project dependency.
  fields:
    - name: name
      type: string
      description: |
        The name of the pypi project to import.
      is_required: true
    - name: version
      type: string
      description: |
        The version nof the pypi project to import.
      is_required: true   
---
schema:
  name: Plugin
  package: aac.lang
  root: plugin
  description: |
    A definition for an AaC plugin. Plugins can provide any extra functionality
    desired on top of AaC-modeled systems from document generation to code
    generation and everything in between.
  fields:
    - name: name
      type: string
      is_required: true
    - name: package
      type: string
      is_required: true
    - name: description
      type: string
    - name: commands
      type: PluginCommand[]
    - name: definition_sources
      type: file[]
---
schema:
  name: PluginCommand
  package: aac.lang
  fields:
    - name: name
      type: string
      description: The name of the command.  This will be used by the CLI to invke the command.
      is_required: true
    - name: help_text
      type: string
      description: |
        A description that will be displayed as help text when displaying
        command usage.
    - name: run_before
      type: PluginCommandReference[]
      description: |
        A listing of plugin commands to run before this command.
    - name: run_after
      type: PluginCommandReference[]
      description: |
        A listing of plugin commands to run before this command.
    - name: input
      type: PluginCommandInput[]
      description: |
        The list of all the fields that are inputs to the component when the
        command is executed.
      is_required: true
---
schema:
  name: PluginCommandReference
  package: aac.lang
  description: |
    A plugin command reference that can be used to establish cross-plugin behaviors.
  fields:
    - name: plugin
      type: string
      description: |
        The name of the plugin to reference.
      is_required: true
    - name: command
      type: string
      description: |
        The name of the command to reference.
      is_required: true
---
schema:
  name: PluginCommandInput
  package: aac.lang
  description: |
    A plugin command reference that can be used to establish cross-plugin behaviors.
  fields:
    - name: name
      type: string
      description: |
        The name of the plugin input parameter.  Prefix the name with "--" to indicate an optional input.
      is_required: true
    - name: description
      type: string
      description: |
        A brief description of the input. This will be used in CLI help.
    - name: type
      type: reference(primitive.name)
      description: |
        The command inputs are translaed to python function inputs.  This is the python type to use.
      is_required: true
    - name: default
      type:  string
      description: |
        The default value to provide to a plugin, if desired.
---
schema:
  name: Generator
  package: aac.lang
  root: generator
  description: |
    A generator associates a model with a Jinja2 template for content genreation.
    Generators can be run using the AaC built-in generate command.
  fields:
    - name: name
      type: string
      description: The name of the generator.
      is_required: true
    - name: description
      type: string
      description: |
        A description of the generator.
    - name: sources
      type: GeneratorSource[]
      description: |
        The list of templates to use when generating content.
      is_required: true
---
schema:
  name: GeneratorSource
  package: aac.lang
  description: |
    The association of an AaC type to a generator template.
  fields:
    - name: name
      type: string
      description: Name of the allocation.
      is_required: true
    - name: data_source
      type: reference(schema.root)
      description: The root key of data items to be provided to the templates.
      is_required: true
    - name: templates
      type: GeneratorTemplate[]
      description: The templates to be applied to the specified model data.
      is_required: true
---
schema:
  name: GeneratorTemplate
  package: aac.lang
  description: |
    A Jinja2 template used to generate content.
  fields:
    - name: name
      type: string
      description: |
        The name of the template.
      is_required: true
    - name: description
      type: string
      description: |
        A short description of the generator template.
    - name: template_file
      type: string
      description: |
        The path to a jinja2 template file.  The template file path provided
        should be relative to the AaC model referencing the template.  You must 
        either provide a template_file or template_contents.
      is_required: true
    - name: overwrite
      type: OverwriteOption
      description: |
        Instructs the generator how to overwrite existing content or not.
      is_required: true
    - name: helper_functions
      type: JinjaHelperFunction[]
      description: |
        A list of helper functions to be made available to the template.
    - name: output_target
      type: GeneratorOutputTarget
      description: |
        Identifies which generator output path to target.
      is_required: true
    - name: output_path_uses_data_source_package
      type: bool
      description: |
        Instructs the generator to insert the package name after the output path when generating files.
    - name: output_file_prefix
      type: string
      description: |
        The prefix to use when generating the output file name.
    - name: output_file_name
      type: string
      description: |
        Specify a file name to output.  If no name given, the default will be the plugin name.
    - name: output_file_suffix
      type: string
      description: |
        The suffix to use when generating the output file name.
    - name: output_file_extension
      type: string
      description: |
        The file extension to use when generating the output file name.
      is_required: true
---
aacenum:
  name: OverwriteOption
  package: aac.lang
  enumerated_values:
    - OVERWRITE
    - SKIP
---
schema:
  name: JinjaHelperFunction
  package: aac.lang
  description: |
    A helper function to be made available to a Jinja2 template.  Helper functions
    are defined as python functions and are made available to the template as
    a python module.
  fields:
    - name: name
      type: string
      description: |
        The name of the helper function.
      is_required: true
    - name: description
      type: string
      description: |
        A short description of the helper function.
    - name: package
      type: string
      description: |
        The python package to be made available to the template.
      is_required: true
    - name: module
      type: string
      description: |
        The python module name containing the function to be made available to the template.
      is_required: true
    - name: function
      type: string
      description: |
        The python function to be made available to the template.
      is_required: true
---
aacenum:
  name: GeneratorOutputTarget
  package: aac.lang
  enumerated_values:
    - CODE
    - TEST
    - DOC
---
# Requirement Specifiction Types
---
schema:
  name: RequirementSpecification
  package: aac.lang
  root: req_spec
  description: |
    A requirement specification definition to capture desired behavior or attributes of the system being modeled.
    
    Within many contexts requirements remain the central element of any Model-Based System Engineering solution.
    AaC supports the definition, derivation, and trace of requirements throughout the model using the spec type and
    associated reference capabilities.
  fields:
    - name: name
      type: string
      description: |
        The name of the requirement specification.
      is_required: true
    - name: description
      type: string
      description: |
        A brief description of the requirement specification.
    - name: sections
      type: reference(req_spec.name)[]
      description: |
        A list of requirement sections that make up the specification.
    - name: parent_specs
      type: reference(req_spec.name)[]
      description: |
        A list of requirement specifications that this specification inherits from.
    - name: child_specs
      type: reference(req_spec.name)[]
      description: |
        A list of requirement specifications that inherit from this specification.
    - name: requirements
      type: reference(req.id)[]
      description: |
        A list of requirements that make up the specification.
---
schema:
  name: Requirement
  package: aac.lang
  root: req
  fields:
    - name: id
      type: string
      description: |
        The unique identifier for the requirement.
      is_required: true
    - name: shall
      type: string
      description: |
        The requirement statement.  If needed, you may reference a requirement parameter
        by name using the following syntax: {param_name}.
      is_required: true
    - name: parents
      type: reference(req.id)[]
      description: |
        A list of requirements that this requirement is decomposed from.
    - name: childern
      type: reference(req.id)[]
      description: |
        A list of requirements that are decomposed from this requirement.
    - name: parameters
      type: reference(req_param.name)[]
      description: |
        A list of parameters that provide additional information about the requirement.
    - name: verification_method
      type: RequirementVerificationMethod
      description: |
        The method used to verify the requirement.
    - name: attributes
      type: RequirementAttribute[]
      description: |
        A list of attributes that provide additional information about the requirement.
---
schema:
  name: RequirementParameter
  package: aac.lang
  root: req_param
  fields:
    - name: name
      type: string
      description: |
        The name of the parameter.
      is_required: true
    - name: value
      type: string
      description: |
        The value of the parameter.
      is_required: true
---
aacenum:
  name: RequirementVerificationMethod
  package: aac.lang
  description: |
    The method used to verify the requirement.
  enumerated_values:
    - ANALYSIS
    - DEMONSTRATION
    - INSPECTION
    - TEST
---
schema:
  name: RequirementAttribute
  package: aac.lang
  description: |
    User definable attributes that can be associataed with a requirement.
    A common example may be explanation or interpretation to provice additional
    context to help reduce ambiguity.
  fields:
    - name: name
      type: string
      description: |
        The name of the attribute.
      is_required: true
    - name: value
      type: string
      description: |
        The value of the attribute.
      is_required: true
---
# Core Behavioral Modeling Types
---
schema:
  name: Model
  package: aac.lang
  root: model
  description: |
    A definition that represents a system and/or component model.
    
    An example of when to use a 'model' is when you want to define the
    behavior for some component of the system.
  fields:
    - name: name
      type: string
      description: |
        The name of the model.
      is_required: true
    - name: description
      type: string
      description: |
        An explanatory description for the model including what the
        component/system is modeling and any other relevant information.
    - name: components
      type: reference(Model.name)
      description: |
        A list of models that are components of the system.
    - name: behavior
      type: Behavior[]
      description: |
        A list of behaviors that the system being modeled will perform.
    - name: state
      type: Field[]
      description: |
        A list of data items representing internal state of the modeled entity.
        State is visible within the model but is not visible to other models.
        State may be visible between multiple instances of the modeled entity to
        support horizontal scaling.
    - name: requirements
      type: reference(req.id)[]
      description: |
        A reference to requirements relevant to the modeled item.
---
schema:
  name: Behavior
  package: aac.lang
  fields:
    - name: name
      type: string
      description: |
        The name of the behavior.
      is_required: true
    - name: description
      type: string
      description: |
        An explanatory description of the behavior, including what the behavior
        is, why it exists, etc.
    - name: tags
      type: string[]
      description: |
        Tags associated with the behavior. These could be used to group similar
        behaviors into categories like "timing", "network", etc.
    - name: input
      type: Field[]
      description: |
        The list of all the fields that are inputs to the component when the
        behavior is performed.
    - name: output
      type: Field[]
      description: |
        The list of all the fields that are outputs to the component when the
        behavior is performed.
    - name: acceptance
      type: Feature[]
      description: |
        A list of test specifications that define the acceptance criteria to signify that
        the system is behaving as expected.
    - name: requirements
      type: reference(req.id)[]
      description: |
        A list of allocated requirements defining the expected behavior to be provided.
---
# Test Specification types
---
schema:
  name: Feature
  package: aac.lang
  description: A test specification for a defined feature as described in the Gherkin syntax.
  fields:
    - name: name
      type: string
      description:  The name of the feature to be tested
      is_required: true
    - name: background
      type: Background
      description: A common set of setup steps for all scenarios
    - name: scenarios
      type: Scenario[]
      description: A set of test cases
      is_required: true
---
schema:
  name: Background
  package: aac.lang
  description: |
    A common set of given steps to be performed for all scenarios defined in a feature as described in the Gherkin syntax.
  fields:
    - name: name
      type: string
      description: |
        The name of the background activities.
    - name: given
      type: string[]
      description: |
        A list of preconditions that must be true in order for the scenario to
        perform the expected action or provide the expected result.
      is_required: true
---
schema:
  name: Scenario
  package: aac.lang
  description: |
    An acceptance test definition using the given, when, then pattern described in the Gherkin syntax.
  fields:
    - name: name
      type: string
      description: |
        The name of the scenario.
      is_required: true
    - name: tags
      type: string[]
      description: |
        Tags associated with the scenario. These could be used to group similar
        scenarios into categories like "front-end", "back-end", etc.
    - name: given
      type: string[]
      description: |
        A list of preconditions that must be true in order for the scenario to
        perform the expected action or provide the expected result.
    - name: when
      type: string[]
      description: |
        A list of triggers that indicate some reason for the system to act in a
        certain way or provide some result.
      is_required: true
    - name: then
      type: string[]
      description: |
        A list of post conditions that will be true once the system has completed
        its action based on the triggers.
      is_required: true
    - name: examples
      type: Example
      description: |
        An list of data sets for use in the test scenario.  When using examples, include
        a replaceable item in your given, when, then using angle brackets as described
        in the Gherkin syntax (ex: <my_text_value).  Each example provided contains the
        collection of named values that will be substituted in for test execution.
---
schema:
  name: Example
  package: aac.lang
  description: |
    Collection of test values that would constitute a line in a row of examples as described in the Gherkin syntax.
  fields:
    - name: name
      type: string
      description: |
        A brief description of the example data entry.
      is_required: true
    - name: values
      type: ExampleValue[]
      description: |
        The values that make up the example row.
      is_required: true
---
schema:
  name: ExampleValue
  package: aac.lang
  description: |
    A test value entry for a scenario.
  fields:
    - name: name
      type: string
      description: |
        The name used in the scenario contained within angle brackets as described in the Gherkin syntax.
      is_required: true
    - name: value
      type: string
      description: |
        The desired value to use.
      is_required: true
---
# Model Constraints
---

schema:
  name: ContextConstraint
  package: aac.lang
  root: context_constraint
  description: |
    The definition of a global context constraint plugin.  Context constraints perform
    checks against a complete model rather than a specific schema or primitive.
    Defining a context constraint allows for automted global quality checks
    by running the 'aac check' command against your model.
  fields:
    - name: name
      type: string
      description: |
        The name of the context constraint rule.
      is_required: true
    - name: description
      type: string
      description: |
        A high level description of the context constraint rule.
    - name: acceptance
      type: Feature[]
      description: |
        A list of acceptance test features that describe the expected behavior of the context constraint.
---
schema:
  name: SchemaConstraint
  package: aac.lang
  root: schema_constraint
  description: |
    The definition of a schema constraint plugin.  Schema constraints perform
    checks against a defined structure within a model based on it's schema definition.
    Defining a schema constraint allows for automted structural quality checks
    by running the 'aac check' command against your model.
  fields:
    - name: name
      type: string
      description: |
        The name of the schema constraint rule.
      is_required: true
    - name: description
      type: string
      description: |
        A high level description of the schema constraint rule.
    - name: acceptance
      type: Feature[]
      description: |
        A list of acceptance test features that describe the expected behavior of the schema constraint.
---
schema:
  name: PrimitiveConstraint
  package: aac.lang
  root: primitive_constraint
  description: |
    The definition of a primitive constraint plugin.  Plugin constraints perform
    checks against individual values within a model based on it's primitive definition.
    Defining a primitive constraint allows for automted value quality checks
    by running the 'aac check' command against your model.
  fields:
    - name: name
      type: string
      description: |
        The name of the schema constraint rule.
      is_required: true
    - name: description
      type: string
      description: |
        A high level description of the schema constraint rule.
    - name: primitive_type
      type: reference(Primitive.name)
      description: |
        A reference to the relevant primitive type.
      is_required: true
    - name: acceptance
      type: Feature[]
      description: |
        A list of acceptance test features that describe the expected behavior of the primitive constraint.
---
schema:
  name: SchemaConstraintAssignment
  package: aac.lang
  fields:
    - name: name
      type: reference(schema_constraint.name)
      description: The name of the schema constraint definition.
      is_required: true
    - name: arguments
      type: string[]
      description: A list of arguments to pass to the constraint.
---
schema:
  name: PrimitiveConstraintAssignment
  package: aac.lang
  fields:
    - name: name
      type: reference(primitive_constraint.name)
      description: The name of the schema constraint definition.
      is_required: true
    - name: arguments
      type: string[]
      description: A list of arguments to pass to the constraint.
