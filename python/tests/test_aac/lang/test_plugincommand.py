# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.plugincommand import PluginCommand

TEST_DATA_ALL = {
    "name": "test",
    "help_text": "test",
    "enable_cache": True,
    "run_before": [
        {"plugin": "test", "command": "test"},
        {"plugin": "test", "command": "test"},
    ],
    "run_after": [
        {"plugin": "test", "command": "test"},
        {"plugin": "test", "command": "test"},
    ],
    "input": [
        {"name": "test", "description": "test", "type": "test", "default": "test"},
        {"name": "test", "description": "test", "type": "test", "default": "test"},
    ],
    "acceptance": [
        {
            "name": "test",
            "background": {"name": "test", "given": ["test", "test"]},
            "scenarios": [
                {
                    "name": "test",
                    "tags": ["test", "test"],
                    "given": ["test", "test"],
                    "when": ["test", "test"],
                    "then": ["test", "test"],
                    "examples": {
                        "name": "test",
                        "values": [
                            {"name": "test", "value": "test"},
                            {"name": "test", "value": "test"},
                        ],
                    },
                },
                {
                    "name": "test",
                    "tags": ["test", "test"],
                    "given": ["test", "test"],
                    "when": ["test", "test"],
                    "then": ["test", "test"],
                    "examples": {
                        "name": "test",
                        "values": [
                            {"name": "test", "value": "test"},
                            {"name": "test", "value": "test"},
                        ],
                    },
                },
            ],
        },
        {
            "name": "test",
            "background": {"name": "test", "given": ["test", "test"]},
            "scenarios": [
                {
                    "name": "test",
                    "tags": ["test", "test"],
                    "given": ["test", "test"],
                    "when": ["test", "test"],
                    "then": ["test", "test"],
                    "examples": {
                        "name": "test",
                        "values": [
                            {"name": "test", "value": "test"},
                            {"name": "test", "value": "test"},
                        ],
                    },
                },
                {
                    "name": "test",
                    "tags": ["test", "test"],
                    "given": ["test", "test"],
                    "when": ["test", "test"],
                    "then": ["test", "test"],
                    "examples": {
                        "name": "test",
                        "values": [
                            {"name": "test", "value": "test"},
                            {"name": "test", "value": "test"},
                        ],
                    },
                },
            ],
        },
    ],
}

TEST_DATA_REQUIRED = {"name": "test"}


class TestPluginCommand(unittest.TestCase):
    def test_plugincommand_from_dict_all_fields(self):
        plugincommand_dict = TEST_DATA_ALL
        instance = PluginCommand.from_dict(deepcopy(plugincommand_dict))
        self.assertEqual(instance.name, plugincommand_dict["name"])
        self.assertEqual(instance.help_text, plugincommand_dict["help_text"])
        self.assertEqual(instance.enable_cache, plugincommand_dict["enable_cache"])
        self.assertIsNotNone(instance.run_before)
        self.assertIsNotNone(instance.run_after)
        self.assertIsNotNone(instance.input)
        self.assertIsNotNone(instance.acceptance)

        plugincommand_dict = TEST_DATA_REQUIRED
        instance = PluginCommand.from_dict(deepcopy(plugincommand_dict))
        self.assertEqual(instance.name, plugincommand_dict["name"])


if __name__ == "__main__":
    unittest.main()
