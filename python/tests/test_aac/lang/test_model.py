# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.model import Model
from aac.lang.behavior import Behavior
from aac.lang.field import Field
from .test_behavior import BehaviorTestHelper
from .test_field import FieldTestHelper


class ModelTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "name": "test",
            "description": "test",
            "components": "test",
            "behavior": [BehaviorTestHelper.generate_data()],
            "state": [FieldTestHelper.generate_data()],
            "requirements": ["test"],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "name": "test",
        }


class TestModel(unittest.TestCase):
    def test_model_from_dict_all_fields(self):
        model_dict = ModelTestHelper.generate_data()
        instance = Model.from_dict(deepcopy(model_dict))
        self.assertEqual(instance.name, model_dict["name"])
        self.assertEqual(instance.description, model_dict["description"])
        self.assertEqual(instance.components, model_dict["components"])
        self.assertIsNotNone(instance.behavior)
        self.assertIsNotNone(instance.state)
        self.assertEqual(instance.requirements, model_dict["requirements"])

        model_dict = ModelTestHelper.generate_data_required_only()
        instance = Model.from_dict(deepcopy(model_dict))
        self.assertEqual(instance.name, model_dict["name"])


if __name__ == "__main__":
    unittest.main()
