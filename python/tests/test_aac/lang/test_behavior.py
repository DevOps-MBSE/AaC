# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.behavior import Behavior
from aac.lang.field import Field
from aac.lang.field import Field
from aac.lang.feature import Feature
from .test_field import FieldTestHelper
from .test_field import FieldTestHelper
from .test_feature import FeatureTestHelper


class BehaviorTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "name": "test",
            "description": "test",
            "tags": ["test"],
            "input": [FieldTestHelper.generate_data()],
            "output": [FieldTestHelper.generate_data()],
            "acceptance": [FeatureTestHelper.generate_data()],
            "requirements": ["test"],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "name": "test",
        }


class TestBehavior(unittest.TestCase):
    def test_behavior_from_dict_all_fields(self):
        behavior_dict = BehaviorTestHelper.generate_data()
        instance = Behavior.from_dict(deepcopy(behavior_dict))
        self.assertEqual(instance.name, behavior_dict["name"])
        self.assertEqual(instance.description, behavior_dict["description"])
        self.assertEqual(instance.tags, behavior_dict["tags"])
        self.assertIsNotNone(instance.input)
        self.assertIsNotNone(instance.output)
        self.assertIsNotNone(instance.acceptance)
        self.assertEqual(instance.requirements, behavior_dict["requirements"])

        behavior_dict = BehaviorTestHelper.generate_data_required_only()
        instance = Behavior.from_dict(deepcopy(behavior_dict))
        self.assertEqual(instance.name, behavior_dict["name"])


if __name__ == "__main__":
    unittest.main()
