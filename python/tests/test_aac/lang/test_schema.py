# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.schema import Schema

TEST_DATA_ALL = {
    "extends": [
        {"package": "test", "name": "test"},
        {"package": "test", "name": "test"},
    ],
    "modifiers": ["test", "test"],
    "root": "test",
    "fields": [
        {
            "name": "test",
            "type": "test",
            "description": "test",
            "is_required": True,
            "default": "test",
        },
        {
            "name": "test",
            "type": "test",
            "description": "test",
            "is_required": True,
            "default": "test",
        },
    ],
    "requirements": ["test", "test"],
    "constraints": [
        {"name": "test", "arguments": "{}"},
        {"name": "test", "arguments": "{}"},
    ],
}

TEST_DATA_REQUIRED = {
    "fields": [{"name": "test", "type": "test"}, {"name": "test", "type": "test"}]
}


class TestSchema(unittest.TestCase):
    def test_schema_from_dict_all_fields(self):
        schema_dict = TEST_DATA_ALL
        instance = Schema.from_dict(deepcopy(schema_dict))
        self.assertIsNotNone(instance.extends)
        self.assertEqual(instance.modifiers, schema_dict["modifiers"])
        self.assertEqual(instance.root, schema_dict["root"])
        self.assertIsNotNone(instance.fields)
        self.assertEqual(instance.requirements, schema_dict["requirements"])
        self.assertIsNotNone(instance.constraints)

        schema_dict = TEST_DATA_REQUIRED
        instance = Schema.from_dict(deepcopy(schema_dict))
        self.assertIsNotNone(instance.fields)


if __name__ == "__main__":
    unittest.main()
