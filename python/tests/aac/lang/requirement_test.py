# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.requirement import Requirement
from aac.lang.requirementverificationmethod import RequirementVerificationMethod
from aac.lang.requirementattribute import RequirementAttribute
from requirementverificationmethod_test import RequirementVerificationMethodTestHelper
from requirementattribute_test import RequirementAttributeTestHelper


class RequirementTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "id": "test",
            "shall": "test",
            "parents": ["test"],
            "childern": ["test"],
            "parameters": ["test"],
            "verification_method": RequirementVerificationMethodTestHelper.generate_data(),
            "attributes": [RequirementAttributeTestHelper.generate_data()],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "id": "test",
            "shall": "test",
        }


class TestRequirement(unittest.TestCase):
    def test_requirement_from_dict_all_fields(self):
        requirement_dict = RequirementTestHelper.generate_data()
        instance = Requirement.from_dict(deepcopy(requirement_dict))
        self.assertEqual(instance.id, requirement_dict["id"])
        self.assertEqual(instance.shall, requirement_dict["shall"])
        self.assertEqual(instance.parents, requirement_dict["parents"])
        self.assertEqual(instance.childern, requirement_dict["childern"])
        self.assertEqual(instance.parameters, requirement_dict["parameters"])
        self.assertIsNotNone(instance.verification_method)
        self.assertIsNotNone(instance.attributes)

        requirement_dict = RequirementTestHelper.generate_data_required_only()
        instance = Requirement.from_dict(deepcopy(requirement_dict))
        self.assertEqual(instance.id, requirement_dict["id"])
        self.assertEqual(instance.shall, requirement_dict["shall"])


if __name__ == "__main__":
    unittest.main()
