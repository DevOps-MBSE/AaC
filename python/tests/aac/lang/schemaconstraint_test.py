# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.schemaconstraint import SchemaConstraint
from aac.lang.field import Field
from aac.lang.feature import Feature
from field_test import FieldTestHelper
from feature_test import FeatureTestHelper


class SchemaConstraintTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "name": "test",
            "description": "test",
            "universal": True,
            "arguments": [FieldTestHelper.generate_data()],
            "acceptance": [FeatureTestHelper.generate_data()],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "name": "test",
        }


class TestSchemaConstraint(unittest.TestCase):
    def test_schemaconstraint_from_dict_all_fields(self):
        schemaconstraint_dict = SchemaConstraintTestHelper.generate_data()
        instance = SchemaConstraint.from_dict(deepcopy(schemaconstraint_dict))
        self.assertEqual(instance.name, schemaconstraint_dict["name"])
        self.assertEqual(instance.description, schemaconstraint_dict["description"])
        self.assertEqual(instance.universal, schemaconstraint_dict["universal"])
        self.assertIsNotNone(instance.arguments)
        self.assertIsNotNone(instance.acceptance)

        schemaconstraint_dict = SchemaConstraintTestHelper.generate_data_required_only()
        instance = SchemaConstraint.from_dict(deepcopy(schemaconstraint_dict))
        self.assertEqual(instance.name, schemaconstraint_dict["name"])


if __name__ == "__main__":
    unittest.main()
