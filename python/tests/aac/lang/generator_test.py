# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.generator import Generator
from aac.lang.generatorsource import GeneratorSource
from generatorsource_test import GeneratorSourceTestHelper


class GeneratorTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "name": "test",
            "description": "test",
            "sources": [GeneratorSourceTestHelper.generate_data()],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "name": "test",
            "sources": [GeneratorSourceTestHelper.generate_data_required_only()],
        }


class TestGenerator(unittest.TestCase):
    def test_generator_from_dict_all_fields(self):
        generator_dict = GeneratorTestHelper.generate_data()
        instance = Generator.from_dict(deepcopy(generator_dict))
        self.assertEqual(instance.name, generator_dict["name"])
        self.assertEqual(instance.description, generator_dict["description"])
        self.assertIsNotNone(instance.sources)

        generator_dict = GeneratorTestHelper.generate_data_required_only()
        instance = Generator.from_dict(deepcopy(generator_dict))
        self.assertEqual(instance.name, generator_dict["name"])
        self.assertIsNotNone(instance.sources)


if __name__ == "__main__":
    unittest.main()
