# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.schema import Schema
from aac.lang.schemaextension import SchemaExtension
from aac.lang.field import Field
from aac.lang.schemaconstraintassignment import SchemaConstraintAssignment
from schemaextension_test import SchemaExtensionTestHelper
from field_test import FieldTestHelper
from schemaconstraintassignment_test import SchemaConstraintAssignmentTestHelper


class SchemaTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "extends": [SchemaExtensionTestHelper.generate_data()],
            "modifiers": ["test"],
            "root": "test",
            "fields": [FieldTestHelper.generate_data()],
            "requirements": ["test"],
            "constraints": [SchemaConstraintAssignmentTestHelper.generate_data()],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "fields": [FieldTestHelper.generate_data_required_only()],
        }


class TestSchema(unittest.TestCase):
    def test_schema_from_dict_all_fields(self):
        schema_dict = SchemaTestHelper.generate_data()
        instance = Schema.from_dict(deepcopy(schema_dict))
        self.assertIsNotNone(instance.extends)
        self.assertEqual(instance.modifiers, schema_dict["modifiers"])
        self.assertEqual(instance.root, schema_dict["root"])
        self.assertIsNotNone(instance.fields)
        self.assertEqual(instance.requirements, schema_dict["requirements"])
        self.assertIsNotNone(instance.constraints)

        schema_dict = SchemaTestHelper.generate_data_required_only()
        instance = Schema.from_dict(deepcopy(schema_dict))
        self.assertIsNotNone(instance.fields)


if __name__ == "__main__":
    unittest.main()
