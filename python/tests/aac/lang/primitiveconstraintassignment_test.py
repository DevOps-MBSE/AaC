# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.primitiveconstraintassignment import PrimitiveConstraintAssignment
from aac.lang.plugininputvalue import PluginInputValue
from plugininputvalue_test import PluginInputValueTestHelper


class PrimitiveConstraintAssignmentTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "name": "test",
            "arguments": [PluginInputValueTestHelper.generate_data()],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "name": "test",
        }


class TestPrimitiveConstraintAssignment(unittest.TestCase):
    def test_primitiveconstraintassignment_from_dict_all_fields(self):
        primitiveconstraintassignment_dict = (
            PrimitiveConstraintAssignmentTestHelper.generate_data()
        )
        instance = PrimitiveConstraintAssignment.from_dict(
            deepcopy(primitiveconstraintassignment_dict)
        )
        self.assertEqual(instance.name, primitiveconstraintassignment_dict["name"])
        self.assertIsNotNone(instance.arguments)

        primitiveconstraintassignment_dict = (
            PrimitiveConstraintAssignmentTestHelper.generate_data_required_only()
        )
        instance = PrimitiveConstraintAssignment.from_dict(
            deepcopy(primitiveconstraintassignment_dict)
        )
        self.assertEqual(instance.name, primitiveconstraintassignment_dict["name"])


if __name__ == "__main__":
    unittest.main()
