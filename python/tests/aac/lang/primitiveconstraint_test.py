# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

import unittest
from copy import deepcopy
from aac.lang.primitiveconstraint import PrimitiveConstraint
from aac.lang.feature import Feature
from feature_test import FeatureTestHelper


class PrimitiveConstraintTestHelper:
    @staticmethod
    def generate_data() -> dict:
        return {
            "name": "test",
            "description": "test",
            "primitive_type": "test",
            "acceptance": [FeatureTestHelper.generate_data()],
        }

    @staticmethod
    def generate_data_required_only() -> dict:
        return {
            "name": "test",
            "primitive_type": "test",
        }


class TestPrimitiveConstraint(unittest.TestCase):
    def test_primitiveconstraint_from_dict_all_fields(self):
        primitiveconstraint_dict = PrimitiveConstraintTestHelper.generate_data()
        instance = PrimitiveConstraint.from_dict(deepcopy(primitiveconstraint_dict))
        self.assertEqual(instance.name, primitiveconstraint_dict["name"])
        self.assertEqual(instance.description, primitiveconstraint_dict["description"])
        self.assertEqual(
            instance.primitive_type, primitiveconstraint_dict["primitive_type"]
        )
        self.assertIsNotNone(instance.acceptance)

        primitiveconstraint_dict = (
            PrimitiveConstraintTestHelper.generate_data_required_only()
        )
        instance = PrimitiveConstraint.from_dict(deepcopy(primitiveconstraint_dict))
        self.assertEqual(instance.name, primitiveconstraint_dict["name"])
        self.assertEqual(
            instance.primitive_type, primitiveconstraint_dict["primitive_type"]
        )


if __name__ == "__main__":
    unittest.main()
